{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Development\\\\QA\\\\OldQA\\\\web\\\\src\\\\components\\\\Subscriber\\\\EditSubscriber.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalFooter, ModalBody, ModalCloseButton, Button, Box, useDisclosure } from \"@chakra-ui/react\";\nimport { Form, Formik } from \"formik\";\nimport { withApollo } from \"../../utils/withApollo\";\nimport { InputField } from \"../Inputs/InputField\";\nimport { SwitchField } from \"../Inputs/SwitchField\";\nimport { useUpdateSubMutation } from \"../../generated/graphql\";\nimport { toErrorMap } from \"../../utils/toErrorMap\";\n\nvar SubsModal = function SubsModal(_ref) {\n  _s();\n\n  var id = _ref.id,\n      name = _ref.name,\n      email = _ref.email,\n      subscribed = _ref.subscribed;\n\n  var _useUpdateSubMutation = useUpdateSubMutation(),\n      _useUpdateSubMutation2 = _slicedToArray(_useUpdateSubMutation, 1),\n      updateSub = _useUpdateSubMutation2[0];\n\n  var _useDisclosure = useDisclosure(),\n      isOpen = _useDisclosure.isOpen,\n      onOpen = _useDisclosure.onOpen,\n      onClose = _useDisclosure.onClose;\n\n  return __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: onOpen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, \"Edit\"), __jsx(Modal, {\n    closeOnOverlayClick: false,\n    isOpen: isOpen,\n    onClose: onClose,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, __jsx(ModalOverlay, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }), __jsx(ModalContent, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, __jsx(ModalHeader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }, \"Contact \", name), __jsx(ModalCloseButton, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }), __jsx(Formik, {\n    initialValues: {\n      name: name,\n      email: email,\n      subscribed: subscribed\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n        var _response$data, _response$data2;\n\n        var setErrors, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setErrors = _ref2.setErrors;\n                _context.next = 3;\n                return updateSub({\n                  variables: _objectSpread({\n                    id: id\n                  }, values),\n                  update: function update(cache, _ref4) {\n                    var data = _ref4.data;\n                    console.log(data);\n\n                    if (!(data !== null && data !== void 0 && data.updateSub.errors)) {\n                      cache.evict({\n                        fieldName: \"subs:{}\"\n                      });\n                    }\n                  }\n                });\n\n              case 3:\n                response = _context.sent;\n\n                if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.updateSub.errors) {\n                  setErrors(toErrorMap(response.data.updateSub.errors));\n                  console.log(response.data.updateSub.errors);\n                } else if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.updateSub.sub) {\n                  onClose();\n                }\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, function (_ref5) {\n    var isSubmitting = _ref5.isSubmitting;\n    return __jsx(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 15\n      }\n    }, __jsx(ModalBody, {\n      pb: 6,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }\n    }, __jsx(InputField, {\n      name: \"name\",\n      placeholder: \"name\",\n      label: \"Name\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 19\n      }\n    }), __jsx(Box, {\n      mt: 4,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 19\n      }\n    }, __jsx(InputField, {\n      name: \"email\",\n      placeholder: \"email\",\n      label: \"Email\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }\n    })), subscribed && __jsx(Box, {\n      mt: 4,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }\n    }, __jsx(SwitchField, {\n      name: \"subscribed\",\n      label: \"Active?\",\n      defaultIsChecked: subscribed,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 23\n      }\n    }))), __jsx(ModalFooter, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }, __jsx(Button, {\n      mr: 3,\n      type: \"submit\",\n      isLoading: isSubmitting,\n      background: \"blue\",\n      color: \"white\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 19\n      }\n    }, \"update contact\"), __jsx(Button, {\n      onClick: onClose,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 19\n      }\n    }, \"Cancel\")));\n  }))));\n};\n\n_s(SubsModal, \"lTv1Io0JQDBDoWuKZ9ebWJewUo4=\", false, function () {\n  return [useUpdateSubMutation, useDisclosure];\n});\n\n_c = SubsModal;\nexport default withApollo({\n  ssr: false\n})(SubsModal);\n\nvar _c;\n\n$RefreshReg$(_c, \"SubsModal\");","map":{"version":3,"sources":["D:/Development/QA/OldQA/web/src/components/Subscriber/EditSubscriber.tsx"],"names":["React","Modal","ModalOverlay","ModalContent","ModalHeader","ModalFooter","ModalBody","ModalCloseButton","Button","Box","useDisclosure","Form","Formik","withApollo","InputField","SwitchField","useUpdateSubMutation","toErrorMap","SubsModal","id","name","email","subscribed","updateSub","isOpen","onOpen","onClose","values","setErrors","variables","update","cache","data","console","log","errors","evict","fieldName","response","sub","isSubmitting","ssr"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  Box,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport { Form, Formik } from \"formik\";\r\nimport { withApollo } from \"../../utils/withApollo\";\r\nimport { InputField } from \"../Inputs/InputField\";\r\nimport { SwitchField } from \"../Inputs/SwitchField\";\r\nimport { useUpdateSubMutation } from \"../../generated/graphql\";\r\nimport { toErrorMap } from \"../../utils/toErrorMap\";\r\ninterface SubsModalProps {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  subscribed: boolean;\r\n}\r\n\r\nconst SubsModal: React.FC<SubsModalProps> = ({\r\n  id,\r\n  name,\r\n  email,\r\n  subscribed,\r\n}) => {\r\n  const [updateSub] = useUpdateSubMutation();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={onOpen}>Edit</Button>\r\n\r\n      <Modal closeOnOverlayClick={false} isOpen={isOpen} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Contact {name}</ModalHeader>\r\n          <ModalCloseButton />\r\n          <Formik\r\n            initialValues={{ name, email, subscribed }}\r\n            onSubmit={async (values, { setErrors }) => {\r\n              const response = await updateSub({\r\n                variables: { id: id, ...values },\r\n                update: (cache, { data }) => {\r\n                  console.log(data);\r\n                  if (!data?.updateSub.errors) {\r\n                    cache.evict({ fieldName: \"subs:{}\" });\r\n                  }\r\n                },\r\n              });\r\n              if (response.data?.updateSub.errors) {\r\n                setErrors(toErrorMap(response.data.updateSub.errors));\r\n                console.log(response.data.updateSub.errors);\r\n              } else if (response.data?.updateSub.sub) {\r\n                onClose();\r\n              }\r\n            }}\r\n          >\r\n            {({ isSubmitting }) => (\r\n              <Form>\r\n                <ModalBody pb={6}>\r\n                  <InputField name=\"name\" placeholder=\"name\" label=\"Name\" />\r\n                  <Box mt={4}>\r\n                    <InputField\r\n                      name=\"email\"\r\n                      placeholder=\"email\"\r\n                      label=\"Email\"\r\n                    />\r\n                  </Box>\r\n                  {subscribed && (\r\n                    <Box mt={4}>\r\n                      <SwitchField\r\n                        name=\"subscribed\"\r\n                        label=\"Active?\"\r\n                        defaultIsChecked={subscribed}\r\n                      />\r\n                    </Box>\r\n                  )}\r\n                </ModalBody>\r\n\r\n                <ModalFooter>\r\n                  <Button\r\n                    mr={3}\r\n                    type=\"submit\"\r\n                    isLoading={isSubmitting}\r\n                    background=\"blue\"\r\n                    color=\"white\"\r\n                  >\r\n                    update contact\r\n                  </Button>\r\n\r\n                  <Button onClick={onClose}>Cancel</Button>\r\n                </ModalFooter>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withApollo({ ssr: false })(SubsModal);\r\n"]},"metadata":{},"sourceType":"module"}