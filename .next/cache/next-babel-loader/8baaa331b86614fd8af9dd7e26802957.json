{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\QA\\\\OldQA\\\\web\\\\src\\\\components\\\\Subscriber\\\\docImport.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useCallback } from \"react\";\nimport { Button, Box, Flex, useToast, Text, Modal, ModalOverlay, ModalContent, ModalHeader, ModalFooter, ModalBody, useDisclosure } from \"@chakra-ui/react\";\n\nconst {\n  ExcelRenderer\n} = require(\"react-excel-renderer\");\n\nimport { useDropzone } from \"react-dropzone\";\nimport DetailsDropDown from \"./DetailsDropDown\";\n\nconst parser = require(\"fast-xml-parser\");\n\nimport { useCreateSubMutation } from \"../../generated/graphql\";\nimport { toErrorMap } from \"../../utils/toErrorMap\";\nexport const DocImport = ({}) => {\n  const [createSub] = useCreateSubMutation();\n  const {\n    0: File,\n    1: setFile\n  } = useState([]);\n  const {\n    0: UploadFile,\n    1: setUploadFile\n  } = useState([]);\n  const {\n    0: rows,\n    1: setrows\n  } = useState([]);\n  const {\n    0: rows1,\n    1: setrows1\n  } = useState([]);\n  const {\n    0: xml,\n    1: setxml\n  } = useState([]);\n  const {\n    0: Loader,\n    1: setLoader\n  } = useState(false);\n  const {\n    0: filename,\n    1: setfilename\n  } = useState(\"\");\n  const {\n    0: Firstname,\n    1: setFirstname\n  } = useState(\"\");\n  const {\n    0: Email,\n    1: setEmail\n  } = useState(\"\");\n  const toast = useToast();\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n  const {\n    0: RecordSize,\n    1: setRecordSize\n  } = useState(\"\");\n\n  const clear = () => {\n    setFile([]);\n    setxml([]);\n    setfilename(\"\");\n    setrows([]);\n    setrows1([]);\n    setFirstname(\"\");\n    setEmail(\"\");\n    setRecordSize(\"\");\n  };\n\n  const onDrop = useCallback(acceptedFiles => {\n    setUploadFile(acceptedFiles);\n    setfilename(acceptedFiles[0].name);\n    setFirstname(\"\");\n    setEmail(\"\");\n    setrows([]);\n    setrows1([]);\n\n    if (acceptedFiles[0].type === \"text/xml\") {\n      const reader = new FileReader();\n      reader.readAsText(acceptedFiles[0]);\n\n      reader.onloadend = evt => {\n        var _evt$target;\n\n        const readerData = (_evt$target = evt.target) === null || _evt$target === void 0 ? void 0 : _evt$target.result;\n        const xml = parser.parse(readerData);\n        const val = xml[Object.keys(xml)[0]];\n        const val1 = val[Object.keys(val)[0]];\n        const val2 = val1[Object.keys(val1)[0]];\n        const val3 = Object.keys(val2);\n        setxml(val1);\n        setrows(val3);\n        setRecordSize(val1.length);\n        setrows1([]);\n        setFile([]);\n      };\n    } else {\n      ExcelRenderer(acceptedFiles[0], (err, resp) => {\n        console.log(\"excel\", resp.rows);\n\n        if (err) {\n          console.log(err);\n        } else {\n          let ExcelRows = [];\n          resp.rows.map(item => {\n            if (item.length !== 0) {\n              console.log(item);\n              ExcelRows.push(item);\n            }\n          });\n          console.log(\"ExcelRows\", ExcelRows);\n          let record = ExcelRows.length - 1;\n          setRecordSize(record.toString());\n          setFile(acceptedFiles);\n          setrows(ExcelRows[0]);\n          ExcelRows.shift();\n          setrows1(ExcelRows);\n          setxml([]);\n        }\n      });\n    }\n  }, []);\n\n  const childHandler = async valuesFromChild => {\n    let index = valuesFromChild.e.target.value;\n    let values = valuesFromChild.name;\n    console.log(\"UploadFile[0].type\", UploadFile[0].type);\n    console.log(\"index\", index, values);\n\n    if (UploadFile[0].type === \"text/xml\") {\n      if (values === \"Name\") {\n        const keyelement = rows[index];\n        console.log(\"keyelement\", keyelement);\n        let arr = [];\n        xml.map(async item => arr.push(item[keyelement]));\n        await setFirstname(arr.toString());\n      }\n\n      if (values === \"Email\") {\n        const keyelement = rows[index];\n        console.log(\"keyelement\", keyelement);\n        let arr = [];\n        xml.map(item => arr.push(item[keyelement]));\n        await setEmail(arr.toString());\n      }\n    } else {\n      if (values === \"Name\") {\n        let arr = [];\n        rows1.map(item => arr.push(item[index]));\n        await setFirstname(arr.toString());\n      }\n\n      if (values === \"Email\") {\n        let arr = [];\n        rows1.map(item => arr.push(item[index]));\n        await setEmail(arr.toString());\n      }\n    }\n  };\n\n  const uploadData = () => {\n    console.log(\"Firstname , emails\", filename, Firstname, Email);\n\n    if (Firstname === \"\" || Email === \"\") {\n      toast({\n        title: \"Empty Feilds\",\n        status: \"warning\",\n        duration: 4000,\n        isClosable: true\n      });\n    } else {\n      setLoader(true);\n      const respones = createSub({\n        variables: {\n          input: {\n            name: Firstname,\n            email: Email\n          }\n        },\n        update: (cache, {\n          data\n        }) => {\n          if (!(data !== null && data !== void 0 && data.createSub.errors)) {\n            cache.evict({\n              fieldName: \"subs:{}\"\n            });\n          }\n        }\n      }).then(res => {\n        if (res) {\n          var _res$data, _res$data2;\n\n          setLoader(false);\n\n          if ((_res$data = res.data) !== null && _res$data !== void 0 && _res$data.createSub.errors) {\n            toErrorMap(res.data.createSub.errors);\n            toast({\n              title: \"Warning\",\n              status: \"warning\",\n              duration: 4000,\n              isClosable: true,\n              description: res.data.createSub.errors[0].message\n            });\n          } else if ((_res$data2 = res.data) !== null && _res$data2 !== void 0 && _res$data2.createSub.sub) {\n            toast({\n              title: \"Success\",\n              status: \"success\",\n              duration: 4000,\n              isClosable: true,\n              description: RecordSize + \" records uploaded\"\n            });\n            clear();\n            onClose;\n          }\n        }\n      });\n    }\n  };\n\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    onDrop\n  });\n  return __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: onOpen,\n    ml: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }\n  }, \"Import File\"), __jsx(Modal, {\n    size: \"4xl\",\n    colorScheme: \"whiteAlpha\",\n    isCentered: true,\n    blockScrollOnMount: false,\n    closeOnOverlayClick: false,\n    isOpen: isOpen,\n    onClose: onClose,\n    motionPreset: \"scale\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }\n  }, __jsx(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }\n  }), __jsx(ModalContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }\n  }, __jsx(ModalHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 11\n    }\n  }, \"Import File\"), Loader === true ? __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }\n  }, __jsx(\"img\", {\n    className: \"loader\",\n    src: \"/static/Loader.gif\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 15\n    }\n  })) : __jsx(React.Fragment, null, __jsx(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 15\n    }\n  }, __jsx(Flex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 17\n    }\n  }, __jsx(Box, {\n    w: \"100%\",\n    p: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 19\n    }\n  }, __jsx(Box, {\n    style: {\n      display: \"flex\",\n      justifyContent: \"space-between\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 21\n    }\n  }, __jsx(Button, _extends({}, getRootProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 23\n    }\n  }), \" \", __jsx(\"input\", _extends({}, getInputProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 25\n    }\n  })), isDragActive ? __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 27\n    }\n  }, \"Drop the files here ...\") : __jsx(React.Fragment, null, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 29\n    }\n  }, \"Drag 'n' drop file here, or click to select file\"))), __jsx(Button, {\n    onClick: clear,\n    colorScheme: \"teal\",\n    mr: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 23\n    }\n  }, \"Clear\")), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 21\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 21\n    }\n  }, \"First row should contain feilds name\"), __jsx(Flex, {\n    pt: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 21\n    }\n  }, RecordSize === \"\" ? \"\" : __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 25\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 27\n    }\n  }, filename), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 27\n    }\n  }, \"Total Records: \", RecordSize))), __jsx(DetailsDropDown, {\n    name: \"Name\",\n    options: rows,\n    action: childHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 21\n    }\n  }), __jsx(DetailsDropDown, {\n    name: \"Email\",\n    options: rows,\n    action: childHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 21\n    }\n  })))), __jsx(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 15\n    }\n  }, __jsx(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 17\n    }\n  }, \"Dowmloa\"), __jsx(Button, {\n    mr: 2,\n    type: \"submit\",\n    background: \"blue\",\n    color: \"white\",\n    onClick: uploadData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 17\n    }\n  }, \"Upload\"), __jsx(Button, {\n    onClick: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 17\n    }\n  }, \"Cancel\"))))));\n};","map":{"version":3,"sources":["D:/Development/QA/OldQA/web/src/components/Subscriber/docImport.tsx"],"names":["React","useState","useCallback","Button","Box","Flex","useToast","Text","Modal","ModalOverlay","ModalContent","ModalHeader","ModalFooter","ModalBody","useDisclosure","ExcelRenderer","require","useDropzone","DetailsDropDown","parser","useCreateSubMutation","toErrorMap","DocImport","createSub","File","setFile","UploadFile","setUploadFile","rows","setrows","rows1","setrows1","xml","setxml","Loader","setLoader","filename","setfilename","Firstname","setFirstname","Email","setEmail","toast","isOpen","onOpen","onClose","RecordSize","setRecordSize","clear","onDrop","acceptedFiles","name","type","reader","FileReader","readAsText","onloadend","evt","readerData","target","result","parse","val","Object","keys","val1","val2","val3","length","err","resp","console","log","ExcelRows","map","item","push","record","toString","shift","childHandler","valuesFromChild","index","e","value","values","keyelement","arr","uploadData","title","status","duration","isClosable","respones","variables","input","email","update","cache","data","errors","evict","fieldName","then","res","description","message","sub","getRootProps","getInputProps","isDragActive","display","justifyContent"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\r\nimport {\r\n  Button,\r\n  Box,\r\n  Flex,\r\n  useToast,\r\n  Text,\r\n  Spacer,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nconst { ExcelRenderer } = require(\"react-excel-renderer\");\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport DetailsDropDown from \"./DetailsDropDown\";\r\nconst parser = require(\"fast-xml-parser\");\r\nimport { useCreateSubMutation } from \"../../generated/graphql\";\r\nimport { toErrorMap } from \"../../utils/toErrorMap\";\r\n\r\nexport const DocImport: React.FC<{}> = ({}) => {\r\n  const [createSub] = useCreateSubMutation();\r\n  const [File, setFile] = useState([]);\r\n  const [UploadFile, setUploadFile] = useState([] as any);\r\n  const [rows, setrows] = useState([] as any);\r\n  const [rows1, setrows1] = useState([]);\r\n  const [xml, setxml] = useState([]);\r\n  const [Loader, setLoader] = useState(false);\r\n  const [filename, setfilename] = useState(\"\");\r\n  const [Firstname, setFirstname] = useState(\"\");\r\n  const [Email, setEmail] = useState(\"\");\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [RecordSize, setRecordSize] = useState(\"\");\r\n\r\n  const clear = () => {\r\n    setFile([]);\r\n    setxml([]);\r\n    setfilename(\"\");\r\n    setrows([]);\r\n    setrows1([]);\r\n    setFirstname(\"\");\r\n    setEmail(\"\");\r\n    setRecordSize(\"\");\r\n  };\r\n\r\n  const onDrop = useCallback((acceptedFiles) => {\r\n    setUploadFile(acceptedFiles);\r\n    setfilename(acceptedFiles[0].name);\r\n    setFirstname(\"\");\r\n    setEmail(\"\");\r\n    setrows([]);\r\n    setrows1([]);\r\n    if (acceptedFiles[0].type === \"text/xml\") {\r\n      const reader = new FileReader();\r\n      reader.readAsText(acceptedFiles[0]);  \r\n      reader.onloadend = (evt) => {\r\n        const readerData: any = evt.target?.result;\r\n        const xml = parser.parse(readerData);\r\n        const val = xml[Object.keys(xml)[0]];\r\n        const val1 = val[Object.keys(val)[0]];\r\n        const val2 = val1[Object.keys(val1)[0]];\r\n        const val3 = Object.keys(val2);\r\n        setxml(val1);\r\n        setrows(val3);\r\n        setRecordSize(val1.length);\r\n        setrows1([]);\r\n        setFile([]);\r\n      };\r\n    } else {\r\n      ExcelRenderer(acceptedFiles[0], (err: any, resp: any) => {\r\n        console.log(\"excel\", resp.rows);\r\n        if (err) {\r\n          console.log(err);\r\n        } else {\r\n          let ExcelRows: any = [];\r\n          resp.rows.map((item: any) => {\r\n            if (item.length !== 0) {\r\n              console.log(item);\r\n              ExcelRows.push(item);\r\n            }\r\n          });\r\n\r\n          console.log(\"ExcelRows\" , ExcelRows)\r\n          let record = ExcelRows.length - 1;\r\n          setRecordSize(record.toString());\r\n          setFile(acceptedFiles);\r\n          setrows(ExcelRows[0]);\r\n          ExcelRows.shift();\r\n          setrows1(ExcelRows);\r\n          setxml([]);\r\n        }\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const childHandler = async (valuesFromChild: any) => {\r\n    let index = valuesFromChild.e.target.value;\r\n    let values = valuesFromChild.name;\r\n    console.log(\"UploadFile[0].type\" , UploadFile[0].type)\r\n    console.log(\"index\" , index , values)\r\n    if (UploadFile[0].type === \"text/xml\") {\r\n      if (values === \"Name\") {\r\n        const keyelement = rows[index];\r\n        console.log(\"keyelement\",keyelement)\r\n        let arr: any = [];\r\n        xml.map(async (item: any) => arr.push(item[keyelement]));\r\n        await setFirstname(arr.toString());\r\n      }\r\n      if (values === \"Email\") {\r\n        const keyelement = rows[index];\r\n        console.log(\"keyelement\",keyelement)\r\n        let arr: any = [];\r\n        xml.map((item: any) => arr.push(item[keyelement]));\r\n        await setEmail(arr.toString());\r\n      }\r\n    } else {\r\n      if (values === \"Name\") {\r\n        let arr: any = [];\r\n        rows1.map((item) => arr.push(item[index]));\r\n        await setFirstname(arr.toString());\r\n      }\r\n      if (values === \"Email\") {\r\n        let arr: any = [];\r\n        rows1.map((item) => arr.push(item[index]));\r\n        await setEmail(arr.toString());\r\n      }\r\n    }\r\n  };\r\n\r\n  const uploadData = () => {\r\n\r\n    console.log(\"Firstname , emails\" , filename , Firstname , Email)\r\n    if (Firstname === \"\" || Email === \"\") {\r\n      toast({\r\n        title: \"Empty Feilds\",\r\n        status: \"warning\",\r\n        duration: 4000,\r\n        isClosable: true,\r\n      });\r\n    } else {\r\n      setLoader(true);\r\n      const respones = createSub({\r\n        variables: {\r\n          input: {\r\n            name: Firstname,\r\n            email: Email,\r\n          },\r\n        },\r\n        update: (cache, { data }) => {\r\n          if (!data?.createSub.errors) {\r\n            cache.evict({ fieldName: \"subs:{}\" });\r\n          }\r\n        },\r\n      }).then((res) => {\r\n        if (res) {\r\n          setLoader(false);\r\n          if (res.data?.createSub.errors) {\r\n            toErrorMap(res.data.createSub.errors);\r\n            toast({\r\n              title: \"Warning\",\r\n              status: \"warning\",\r\n              duration: 4000,\r\n              isClosable: true,\r\n              description: res.data.createSub.errors[0].message,\r\n            });\r\n          } else if (res.data?.createSub.sub) {\r\n            toast({\r\n              title: \"Success\",\r\n              status: \"success\",\r\n              duration: 4000,\r\n              isClosable: true,\r\n              description: RecordSize + \" records uploaded\",\r\n            });\r\n            clear();\r\n            onClose;\r\n          }\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n  return (\r\n    <>\r\n      <Button onClick={onOpen} ml=\"3\">\r\n        Import File\r\n      </Button>\r\n\r\n      <Modal\r\n        size=\"4xl\"\r\n        colorScheme=\"whiteAlpha\"\r\n        isCentered\r\n        blockScrollOnMount={false}\r\n        closeOnOverlayClick={false}\r\n        isOpen={isOpen}\r\n        onClose={onClose}\r\n        motionPreset=\"scale\"\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Import File</ModalHeader>\r\n\r\n          {Loader === true ? (\r\n            <div>\r\n              <img className=\"loader\" src=\"/static/Loader.gif\" />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <ModalBody>\r\n                <Flex>\r\n                  <Box w=\"100%\" p={4}>\r\n                    <Box\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                      }}\r\n                    >\r\n                      <Button {...getRootProps()}>\r\n                        {\" \"}\r\n                        <input {...getInputProps()} />\r\n                        {isDragActive ? (\r\n                          <p>Drop the files here ...</p>\r\n                        ) : (\r\n                          <>\r\n                            <p>\r\n                              Drag 'n' drop file here, or click to select file\r\n                            </p>\r\n                          </>\r\n                        )}\r\n                      </Button>\r\n                      <Button onClick={clear} colorScheme=\"teal\" mr=\"4\">\r\n                        Clear\r\n                      </Button>\r\n                    </Box>\r\n                    <br />\r\n                    <p>First row should contain feilds name</p>\r\n\r\n                    <Flex pt=\"2\">\r\n                      {RecordSize === \"\" ? (\r\n                        \"\"\r\n                      ) : (\r\n                        <Box>\r\n                          <Text>{filename}</Text>\r\n                          <Text>Total Records: {RecordSize}</Text>\r\n                        </Box>\r\n                      )}\r\n                    </Flex>\r\n\r\n                    <DetailsDropDown\r\n                      name=\"Name\"\r\n                      options={rows}\r\n                      action={childHandler}\r\n                    />\r\n                    <DetailsDropDown\r\n                      name=\"Email\"\r\n                      options={rows}\r\n                      action={childHandler}\r\n                    />\r\n                  </Box>\r\n                </Flex>\r\n              </ModalBody>\r\n              <ModalFooter>\r\n                <Button>\r\n                  Dowmloa\r\n                </Button>\r\n                <Button\r\n                  mr={2}\r\n                  type=\"submit\"\r\n                  background=\"blue\"\r\n                  color=\"white\"\r\n                  onClick={uploadData}\r\n                >\r\n                  Upload\r\n                </Button>\r\n\r\n                <Button onClick={onClose}>Cancel</Button>\r\n              </ModalFooter>\r\n            </>\r\n          )}\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}