{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\QA\\\\OldQA\\\\web\\\\src\\\\components\\\\Subscriber\\\\EditSubscriber.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalFooter, ModalBody, ModalCloseButton, Button, Box, useDisclosure } from \"@chakra-ui/react\";\nimport { Form, Formik } from \"formik\";\nimport { withApollo } from \"../../utils/withApollo\";\nimport { InputField } from \"../Inputs/InputField\";\nimport { SwitchField } from \"../Inputs/SwitchField\";\nimport { useUpdateSubMutation } from \"../../generated/graphql\";\nimport { toErrorMap } from \"../../utils/toErrorMap\";\n\nconst SubsModal = ({\n  id,\n  name,\n  email,\n  subscribed\n}) => {\n  const [updateSub] = useUpdateSubMutation();\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n  return __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: onOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, \"Edit\"), __jsx(Modal, {\n    closeOnOverlayClick: false,\n    isOpen: isOpen,\n    onClose: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, __jsx(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }), __jsx(ModalContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, __jsx(ModalHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }, \"Contact \", name), __jsx(ModalCloseButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }), __jsx(Formik, {\n    initialValues: {\n      name,\n      email,\n      subscribed\n    },\n    onSubmit: async (values, {\n      setErrors\n    }) => {\n      var _response$data, _response$data2;\n\n      const response = await updateSub({\n        variables: _objectSpread({\n          id: id\n        }, values),\n        update: (cache, {\n          data\n        }) => {\n          console.log(data);\n\n          if (!(data !== null && data !== void 0 && data.updateSub.errors)) {\n            cache.evict({\n              fieldName: \"subs:{}\"\n            });\n          }\n        }\n      });\n\n      if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.updateSub.errors) {\n        setErrors(toErrorMap(response.data.updateSub.errors));\n        console.log(response.data.updateSub.errors);\n      } else if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.updateSub.sub) {\n        onClose();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, ({\n    isSubmitting\n  }) => __jsx(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }\n  }, __jsx(ModalBody, {\n    pb: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }, __jsx(InputField, {\n    name: \"name\",\n    placeholder: \"name\",\n    label: \"Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 19\n    }\n  }), __jsx(Box, {\n    mt: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 19\n    }\n  }, __jsx(InputField, {\n    name: \"email\",\n    placeholder: \"email\",\n    label: \"Email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }\n  })), subscribed && __jsx(Box, {\n    mt: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  }, __jsx(SwitchField, {\n    name: \"subscribed\",\n    label: \"Active?\",\n    defaultIsChecked: subscribed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 23\n    }\n  }))), __jsx(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    mr: 3,\n    type: \"submit\",\n    isLoading: isSubmitting,\n    background: \"blue\",\n    color: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 19\n    }\n  }, \"update contact\"), __jsx(Button, {\n    onClick: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 19\n    }\n  }, \"Cancel\")))))));\n};\n\nexport default withApollo({\n  ssr: false\n})(SubsModal);","map":{"version":3,"sources":["D:/Development/QA/OldQA/web/src/components/Subscriber/EditSubscriber.tsx"],"names":["React","Modal","ModalOverlay","ModalContent","ModalHeader","ModalFooter","ModalBody","ModalCloseButton","Button","Box","useDisclosure","Form","Formik","withApollo","InputField","SwitchField","useUpdateSubMutation","toErrorMap","SubsModal","id","name","email","subscribed","updateSub","isOpen","onOpen","onClose","values","setErrors","response","variables","update","cache","data","console","log","errors","evict","fieldName","sub","isSubmitting","ssr"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  Box,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport { Form, Formik } from \"formik\";\r\nimport { withApollo } from \"../../utils/withApollo\";\r\nimport { InputField } from \"../Inputs/InputField\";\r\nimport { SwitchField } from \"../Inputs/SwitchField\";\r\nimport { useUpdateSubMutation } from \"../../generated/graphql\";\r\nimport { toErrorMap } from \"../../utils/toErrorMap\";\r\ninterface SubsModalProps {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  subscribed: boolean;\r\n}\r\n\r\nconst SubsModal: React.FC<SubsModalProps> = ({\r\n  id,\r\n  name,\r\n  email,\r\n  subscribed,\r\n}) => {\r\n  const [updateSub] = useUpdateSubMutation();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={onOpen}>Edit</Button>\r\n\r\n      <Modal closeOnOverlayClick={false} isOpen={isOpen} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Contact {name}</ModalHeader>\r\n          <ModalCloseButton />\r\n          <Formik\r\n            initialValues={{ name, email, subscribed }}\r\n            onSubmit={async (values, { setErrors }) => {\r\n              const response = await updateSub({\r\n                variables: { id: id, ...values },\r\n                update: (cache, { data }) => {\r\n                  console.log(data);\r\n                  if (!data?.updateSub.errors) {\r\n                    cache.evict({ fieldName: \"subs:{}\" });\r\n                  }\r\n                },\r\n              });\r\n              if (response.data?.updateSub.errors) {\r\n                setErrors(toErrorMap(response.data.updateSub.errors));\r\n                console.log(response.data.updateSub.errors);\r\n              } else if (response.data?.updateSub.sub) {\r\n                onClose();\r\n              }\r\n            }}\r\n          >\r\n            {({ isSubmitting }) => (\r\n              <Form>\r\n                <ModalBody pb={6}>\r\n                  <InputField name=\"name\" placeholder=\"name\" label=\"Name\" />\r\n                  <Box mt={4}>\r\n                    <InputField\r\n                      name=\"email\"\r\n                      placeholder=\"email\"\r\n                      label=\"Email\"\r\n                    />\r\n                  </Box>\r\n                  {subscribed && (\r\n                    <Box mt={4}>\r\n                      <SwitchField\r\n                        name=\"subscribed\"\r\n                        label=\"Active?\"\r\n                        defaultIsChecked={subscribed}\r\n                      />\r\n                    </Box>\r\n                  )}\r\n                </ModalBody>\r\n\r\n                <ModalFooter>\r\n                  <Button\r\n                    mr={3}\r\n                    type=\"submit\"\r\n                    isLoading={isSubmitting}\r\n                    background=\"blue\"\r\n                    color=\"white\"\r\n                  >\r\n                    update contact\r\n                  </Button>\r\n\r\n                  <Button onClick={onClose}>Cancel</Button>\r\n                </ModalFooter>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withApollo({ ssr: false })(SubsModal);\r\n"]},"metadata":{},"sourceType":"module"}