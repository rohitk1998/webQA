{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\QA\\\\OldQA\\\\web\\\\src\\\\components\\\\Subscriber\\\\InviteLink.tsx\";\nvar __jsx = React.createElement;\nimport { CopyIcon } from \"@chakra-ui/icons\";\nimport { Box, Flex, IconButton, Input, useToast } from \"@chakra-ui/react\";\nimport React, { useRef } from \"react\";\nimport { useMeQuery } from \"../../generated/graphql\";\nimport { isServer } from \"../../utils/isServer\";\nexport const InviteLink = () => {\n  const {\n    data,\n    loading\n  } = useMeQuery({\n    skip: isServer()\n  });\n  const toast = useToast();\n  const textAreaRef = useRef(null);\n\n  const copyTextToClipboard = () => {\n    if (textAreaRef.current != null) {\n      textAreaRef.current.select();\n      document.execCommand(\"copy\");\n    }\n\n    toast({\n      title: \"Invite Link Copied\",\n      status: \"success\",\n      duration: 9000,\n      isClosable: true\n    });\n  };\n\n  let body = null;\n\n  if (loading) {} else if (!(data !== null && data !== void 0 && data.me)) {\n    body = __jsx(React.Fragment, null);\n  } else {\n    const link = `${process.env.CLIENT_URL}/invite/${data.me.inviteLink}`;\n    body = __jsx(React.Fragment, null, __jsx(Flex, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }\n    }, __jsx(Input, {\n      ref: textAreaRef,\n      value: link,\n      isReadOnly: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }\n    }), __jsx(IconButton, {\n      ml: 2,\n      icon: __jsx(CopyIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 19\n        }\n      }),\n      \"aria-label\": \"Copy Invite Link\",\n      onClick: copyTextToClipboard,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }\n    })));\n  }\n\n  return __jsx(Box, {\n    ml: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 10\n    }\n  }, body);\n};","map":{"version":3,"sources":["D:/Development/QA/OldQA/web/src/components/Subscriber/InviteLink.tsx"],"names":["CopyIcon","Box","Flex","IconButton","Input","useToast","React","useRef","useMeQuery","isServer","InviteLink","data","loading","skip","toast","textAreaRef","copyTextToClipboard","current","select","document","execCommand","title","status","duration","isClosable","body","me","link","process","env","CLIENT_URL","inviteLink"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,kBAAzB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,KAAhC,EAAuCC,QAAvC,QAAuD,kBAAvD;AACA,OAAOC,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,QAAT,QAAyB,sBAAzB;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC9B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBJ,UAAU,CAAC;AACnCK,IAAAA,IAAI,EAAEJ,QAAQ;AADqB,GAAD,CAApC;AAGA,QAAMK,KAAK,GAAGT,QAAQ,EAAtB;AACA,QAAMU,WAAW,GAAGR,MAAM,CAAmB,IAAnB,CAA1B;;AAEA,QAAMS,mBAAmB,GAAG,MAAM;AAChC,QAAID,WAAW,CAACE,OAAZ,IAAuB,IAA3B,EAAiC;AAC/BF,MAAAA,WAAW,CAACE,OAAZ,CAAoBC,MAApB;AACAC,MAAAA,QAAQ,CAACC,WAAT,CAAqB,MAArB;AACD;;AAEDN,IAAAA,KAAK,CAAC;AACJO,MAAAA,KAAK,EAAE,oBADH;AAEJC,MAAAA,MAAM,EAAE,SAFJ;AAGJC,MAAAA,QAAQ,EAAE,IAHN;AAIJC,MAAAA,UAAU,EAAE;AAJR,KAAD,CAAL;AAMD,GAZD;;AAcA,MAAIC,IAAI,GAAG,IAAX;;AAEA,MAAIb,OAAJ,EAAa,CACZ,CADD,MACO,IAAI,EAACD,IAAD,aAACA,IAAD,eAACA,IAAI,CAAEe,EAAP,CAAJ,EAAe;AACpBD,IAAAA,IAAI,GAAG,2BAAP;AACD,GAFM,MAEA;AACL,UAAME,IAAI,GAAI,GAAEC,OAAO,CAACC,GAAR,CAAYC,UAAW,WAAUnB,IAAI,CAACe,EAAL,CAAQK,UAAW,EAApE;AACAN,IAAAA,IAAI,GACF,4BACE,MAAC,IAAD;AAAM,MAAA,KAAK,EAAC,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,KAAD;AAAO,MAAA,GAAG,EAAEV,WAAZ;AAAyB,MAAA,KAAK,EAAEY,IAAhC;AAAsC,MAAA,UAAU,MAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,MAAC,UAAD;AACE,MAAA,EAAE,EAAE,CADN;AAEE,MAAA,IAAI,EAAE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFR;AAGE,oBAAW,kBAHb;AAIE,MAAA,OAAO,EAAEX,mBAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,CADF;AAaD;;AAED,SAAO,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkBS,IAAlB,CAAP;AACD,CA5CM","sourcesContent":["import { CopyIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Flex, IconButton, Input, useToast } from \"@chakra-ui/react\";\r\nimport React, { useRef } from \"react\";\r\nimport { useMeQuery } from \"../../generated/graphql\";\r\nimport { isServer } from \"../../utils/isServer\";\r\n\r\nexport const InviteLink = () => {\r\n  const { data, loading } = useMeQuery({\r\n    skip: isServer(),\r\n  });\r\n  const toast = useToast();\r\n  const textAreaRef = useRef<HTMLInputElement>(null);\r\n\r\n  const copyTextToClipboard = () => {\r\n    if (textAreaRef.current != null) {\r\n      textAreaRef.current.select();\r\n      document.execCommand(\"copy\");\r\n    }\r\n\r\n    toast({\r\n      title: \"Invite Link Copied\",\r\n      status: \"success\",\r\n      duration: 9000,\r\n      isClosable: true,\r\n    });\r\n  };\r\n\r\n  let body = null;\r\n\r\n  if (loading) {\r\n  } else if (!data?.me) {\r\n    body = <></>;\r\n  } else {\r\n    const link = `${process.env.CLIENT_URL}/invite/${data.me.inviteLink}`;\r\n    body = (\r\n      <>\r\n        <Flex align=\"center\">\r\n          <Input ref={textAreaRef} value={link} isReadOnly />\r\n          <IconButton\r\n            ml={2}\r\n            icon={<CopyIcon />}\r\n            aria-label=\"Copy Invite Link\"\r\n            onClick={copyTextToClipboard}\r\n          />\r\n        </Flex>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return <Box ml={\"auto\"}>{body}</Box>;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}