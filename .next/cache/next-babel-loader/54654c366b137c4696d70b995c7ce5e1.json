{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createWithApollo } from './createWithApollo';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst createClient = ctx => {\n  var _ctx$req;\n\n  return new ApolloClient({\n    uri: process.env.NEXT_PUBLIC_API_URL,\n    credentials: 'include',\n    headers: {\n      cookie: (true ? ctx === null || ctx === void 0 ? void 0 : (_ctx$req = ctx.req) === null || _ctx$req === void 0 ? void 0 : _ctx$req.headers.cookie : undefined) || ''\n    },\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            subs: {\n              keyArgs: [],\n\n              merge(existing, incoming) {\n                return _objectSpread(_objectSpread({}, incoming), {}, {\n                  subs: [...((existing === null || existing === void 0 ? void 0 : existing.subs) || []), ...incoming.subs]\n                });\n              }\n\n            },\n            quotes: {\n              keyArgs: [],\n\n              merge(existing, incoming) {\n                return _objectSpread(_objectSpread({}, incoming), {}, {\n                  quotes: [...((existing === null || existing === void 0 ? void 0 : existing.quotes) || []), ...incoming.quotes]\n                });\n              }\n\n            }\n          }\n        }\n      }\n    })\n  });\n};\n\nexport const withApollo = createWithApollo(createClient);","map":{"version":3,"sources":["D:/Development/QA/OldQA/web/src/utils/withApollo.ts"],"names":["createWithApollo","ApolloClient","InMemoryCache","createClient","ctx","uri","process","env","NEXT_PUBLIC_API_URL","credentials","headers","cookie","req","undefined","cache","typePolicies","Query","fields","subs","keyArgs","merge","existing","incoming","quotes","withApollo"],"mappings":";;;;;;AACA,SAASA,gBAAT,QAAiC,oBAAjC;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,gBAA5C;;AAGA,MAAMC,YAAY,GAAIC,GAAD;AAAA;;AAAA,SACnB,IAAIH,YAAJ,CAAiB;AACfI,IAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,mBADF;AAEfC,IAAAA,WAAW,EAAE,SAFE;AAGfC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EACJ,CAAC,OACGP,GADH,aACGA,GADH,mCACGA,GAAG,CAAEQ,GADR,6CACG,SAAUF,OAAV,CAAkBC,MADrB,GAEGE,SAFJ,KAEkB;AAJb,KAHM;AASfC,IAAAA,KAAK,EAAE,IAAIZ,aAAJ,CAAkB;AACvBa,MAAAA,YAAY,EAAE;AACZC,QAAAA,KAAK,EAAE;AACLC,UAAAA,MAAM,EAAE;AACNC,YAAAA,IAAI,EAAE;AACJC,cAAAA,OAAO,EAAE,EADL;;AAEJC,cAAAA,KAAK,CACHC,QADG,EAEHC,QAFG,EAGY;AACf,uDACKA,QADL;AAEEJ,kBAAAA,IAAI,EAAE,CAAC,IAAI,CAAAG,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEH,IAAV,KAAkB,EAAtB,CAAD,EAA4B,GAAGI,QAAQ,CAACJ,IAAxC;AAFR;AAID;;AAVG,aADA;AAaNK,YAAAA,MAAM,EAAE;AACNJ,cAAAA,OAAO,EAAE,EADH;;AAENC,cAAAA,KAAK,CACHC,QADG,EAEHC,QAFG,EAGc;AACjB,uDACKA,QADL;AAEEC,kBAAAA,MAAM,EAAE,CAAC,IAAI,CAAAF,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEE,MAAV,KAAoB,EAAxB,CAAD,EAA8B,GAAGD,QAAQ,CAACC,MAA1C;AAFV;AAID;;AAVK;AAbF;AADH;AADK;AADS,KAAlB;AATQ,GAAjB,CADmB;AAAA,CAArB;;AA4CA,OAAO,MAAMC,UAAU,GAAGxB,gBAAgB,CAACG,YAAD,CAAnC","sourcesContent":["import { PaginatedQuotes, PaginatedSubs } from './../generated/graphql';\r\nimport { createWithApollo } from './createWithApollo';\r\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\r\nimport { NextPageContext } from 'next';\r\n\r\nconst createClient = (ctx: NextPageContext) =>\r\n  new ApolloClient({\r\n    uri: process.env.NEXT_PUBLIC_API_URL as string,\r\n    credentials: 'include',\r\n    headers: {\r\n      cookie:\r\n        (typeof window === 'undefined'\r\n          ? ctx?.req?.headers.cookie\r\n          : undefined) || '',\r\n    },\r\n    cache: new InMemoryCache({\r\n      typePolicies: {\r\n        Query: {\r\n          fields: {\r\n            subs: {\r\n              keyArgs: [],\r\n              merge(\r\n                existing: PaginatedSubs | undefined,\r\n                incoming: PaginatedSubs,\r\n              ): PaginatedSubs {\r\n                return {\r\n                  ...incoming,\r\n                  subs: [...(existing?.subs || []), ...incoming.subs],\r\n                };\r\n              },\r\n            },\r\n            quotes: {\r\n              keyArgs: [],\r\n              merge(\r\n                existing: PaginatedQuotes | undefined,\r\n                incoming: PaginatedQuotes,\r\n              ): PaginatedQuotes {\r\n                return {\r\n                  ...incoming,\r\n                  quotes: [...(existing?.quotes || []), ...incoming.quotes],\r\n                };\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    }),\r\n  });\r\n\r\nexport const withApollo = createWithApollo(createClient);\r\n"]},"metadata":{},"sourceType":"module"}