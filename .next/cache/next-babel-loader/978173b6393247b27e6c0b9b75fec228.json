{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\n\nexport const RegularMailResponesFragmentDoc = gql`\n    fragment RegularMailRespones on MailActivity {\n  id\n  From_Email\n  To_Email\n  subject\n  Status\n  open_count\n  clicks_count\n  msgid\n  type\n}\n    `;\nexport const ActivitySnippetFragmentDoc = gql`\n    fragment ActivitySnippet on ActivityRespone {\n  mailActivity {\n    ...RegularMailRespones\n  }\n}\n    ${RegularMailResponesFragmentDoc}`;\nexport const AllsubSnippetFragmentDoc = gql`\n    fragment AllsubSnippet on SubsCount {\n  ActiveCount\n  NonActiveCount\n}\n    `;\nexport const PaginatedActivitySnippetFragmentDoc = gql`\n    fragment PaginatedActivitySnippet on MailActivity {\n  id\n  From_Email\n  To_Email\n  subject\n  Status\n  msgid\n  open_count\n  clicks_count\n  createdAt\n  body\n  creatorId\n  Author\n  type\n  subsid\n  user {\n    id\n    name\n  }\n  subs {\n    id\n    name\n  }\n}\n    `;\nexport const RegularErrorFragmentDoc = gql`\n    fragment RegularError on FieldError {\n  field\n  message\n}\n    `;\nexport const ProfileUserFragmentDoc = gql`\n    fragment ProfileUser on User {\n  id\n  inviteLink\n  name\n  email\n  address\n  city\n  state\n  zip\n  role\n  catagory\n  title\n  company\n  twitter\n  facebook\n  linkedIn\n  website\n  customerType\n  ccLast4\n  DefaultTemplates\n}\n    `;\nexport const ProfileUserResponseFragmentDoc = gql`\n    fragment ProfileUserResponse on UserResponse {\n  errors {\n    ...RegularError\n  }\n  user {\n    ...ProfileUser\n  }\n}\n    ${RegularErrorFragmentDoc}\n${ProfileUserFragmentDoc}`;\nexport const QuoteSnippetFragmentDoc = gql`\n    fragment QuoteSnippet on Quote {\n  id\n  name\n  user {\n    id\n    email\n  }\n  createdAt\n  catagory\n}\n    `;\nexport const RegularTemplatesFragmentDoc = gql`\n    fragment RegularTemplates on Templates {\n  id\n}\n    `;\nexport const RegularTemplateResponseFragmentDoc = gql`\n    fragment RegularTemplateResponse on TemplateRespones {\n  errors {\n    ...RegularError\n  }\n  template {\n    ...RegularTemplates\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularTemplatesFragmentDoc}`;\nexport const RegularQuoteFragmentDoc = gql`\n    fragment RegularQuote on Quote {\n  id\n}\n    `;\nexport const RegularQuoteResponseFragmentDoc = gql`\n    fragment RegularQuoteResponse on QuoteResponse {\n  errors {\n    ...RegularError\n  }\n  quote {\n    ...RegularQuote\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularQuoteFragmentDoc}`;\nexport const RegularSubFragmentDoc = gql`\n    fragment RegularSub on Sub {\n  id\n}\n    `;\nexport const RegularSubResponseFragmentDoc = gql`\n    fragment RegularSubResponse on SubResponse {\n  errors {\n    ...RegularError\n  }\n  sub {\n    ...RegularSub\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularSubFragmentDoc}`;\nexport const RegularUserFragmentDoc = gql`\n    fragment RegularUser on User {\n  id\n  email\n  inviteLink\n  role\n}\n    `;\nexport const RegularUserResponseFragmentDoc = gql`\n    fragment RegularUserResponse on UserResponse {\n  errors {\n    ...RegularError\n  }\n  user {\n    ...RegularUser\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularUserFragmentDoc}`;\nexport const SubSnippetFragmentDoc = gql`\n    fragment SubSnippet on Sub {\n  id\n  createdAt\n  updatedAt\n  name\n  email\n  subscribed\n  frequency\n  creator {\n    id\n    email\n  }\n}\n    `;\nexport const TemplatesSnippetFragmentDoc = gql`\n    fragment TemplatesSnippet on Templates {\n  id\n  title\n  body\n  subject\n  Active\n  createdAt\n}\n    `;\nexport const AlluserSnippetFragmentDoc = gql`\n    fragment alluserSnippet on Alluser {\n  user {\n    id\n    name\n  }\n}\n    `;\nexport const UpdateTemplatesDocument = gql`\n    mutation UpdateTemplates($id: Int!, $title: String!, $body: String!, $subject: String!, $Active: Boolean!) {\n  updateTemplates(\n    id: $id\n    title: $title\n    body: $body\n    subject: $subject\n    Active: $Active\n  ) {\n    ...RegularTemplateResponse\n  }\n}\n    ${RegularTemplateResponseFragmentDoc}`;\n\n/**\n * __useUpdateTemplatesMutation__\n *\n * To run a mutation, you first call `useUpdateTemplatesMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateTemplatesMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateTemplatesMutation, { data, loading, error }] = useUpdateTemplatesMutation({\n *   variables: {\n *      id: // value for 'id'\n *      title: // value for 'title'\n *      body: // value for 'body'\n *      subject: // value for 'subject'\n *      Active: // value for 'Active'\n *   },\n * });\n */\nexport function useUpdateTemplatesMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(UpdateTemplatesDocument, options);\n}\nexport const AcceptInviteDocument = gql`\n    mutation AcceptInvite($token: String!, $subscribed: Boolean!, $frequency: Float!) {\n  acceptInvite(token: $token, subscribed: $subscribed, frequency: $frequency) {\n    ...RegularSubResponse\n  }\n}\n    ${RegularSubResponseFragmentDoc}`;\n\n/**\n * __useAcceptInviteMutation__\n *\n * To run a mutation, you first call `useAcceptInviteMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAcceptInviteMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [acceptInviteMutation, { data, loading, error }] = useAcceptInviteMutation({\n *   variables: {\n *      token: // value for 'token'\n *      subscribed: // value for 'subscribed'\n *      frequency: // value for 'frequency'\n *   },\n * });\n */\nexport function useAcceptInviteMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(AcceptInviteDocument, options);\n}\nexport const CancelSubscriptionDocument = gql`\n    mutation CancelSubscription {\n  cancelSubscription {\n    ...ProfileUserResponse\n  }\n}\n    ${ProfileUserResponseFragmentDoc}`;\n\n/**\n * __useCancelSubscriptionMutation__\n *\n * To run a mutation, you first call `useCancelSubscriptionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCancelSubscriptionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [cancelSubscriptionMutation, { data, loading, error }] = useCancelSubscriptionMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useCancelSubscriptionMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CancelSubscriptionDocument, options);\n}\nexport const ChangeCreditCardDocument = gql`\n    mutation ChangeCreditCard($source: String!, $ccLast4: String!) {\n  changeCreditCard(source: $source, ccLast4: $ccLast4) {\n    ...ProfileUserResponse\n  }\n}\n    ${ProfileUserResponseFragmentDoc}`;\n\n/**\n * __useChangeCreditCardMutation__\n *\n * To run a mutation, you first call `useChangeCreditCardMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useChangeCreditCardMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [changeCreditCardMutation, { data, loading, error }] = useChangeCreditCardMutation({\n *   variables: {\n *      source: // value for 'source'\n *      ccLast4: // value for 'ccLast4'\n *   },\n * });\n */\nexport function useChangeCreditCardMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(ChangeCreditCardDocument, options);\n}\nexport const ChangePasswordDocument = gql`\n    mutation ChangePassword($token: String!, $newPassword: String!) {\n  changePassword(token: $token, newPassword: $newPassword) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\n\n/**\n * __useChangePasswordMutation__\n *\n * To run a mutation, you first call `useChangePasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useChangePasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [changePasswordMutation, { data, loading, error }] = useChangePasswordMutation({\n *   variables: {\n *      token: // value for 'token'\n *      newPassword: // value for 'newPassword'\n *   },\n * });\n */\nexport function useChangePasswordMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(ChangePasswordDocument, options);\n}\nexport const UpdateMailandFrequencyDocument = gql`\n    mutation updateMailandFrequency($token: String!, $frequency: Float!, $email: String!) {\n  updateMailandFrequency(token: $token, frequency: $frequency, email: $email) {\n    ...RegularSubResponse\n  }\n}\n    ${RegularSubResponseFragmentDoc}`;\n\n/**\n * __useUpdateMailandFrequencyMutation__\n *\n * To run a mutation, you first call `useUpdateMailandFrequencyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateMailandFrequencyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateMailandFrequencyMutation, { data, loading, error }] = useUpdateMailandFrequencyMutation({\n *   variables: {\n *      token: // value for 'token'\n *      frequency: // value for 'frequency'\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useUpdateMailandFrequencyMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(UpdateMailandFrequencyDocument, options);\n}\nexport const CreateQuoteDocument = gql`\n    mutation CreateQuote($input: QuoteInput!) {\n  createQuote(input: $input) {\n    ...RegularQuoteResponse\n  }\n}\n    ${RegularQuoteResponseFragmentDoc}`;\n\n/**\n * __useCreateQuoteMutation__\n *\n * To run a mutation, you first call `useCreateQuoteMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateQuoteMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createQuoteMutation, { data, loading, error }] = useCreateQuoteMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreateQuoteMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateQuoteDocument, options);\n}\nexport const CreateSubDocument = gql`\n    mutation CreateSub($input: SubInput!) {\n  createSub(input: $input) {\n    ...RegularSubResponse\n  }\n}\n    ${RegularSubResponseFragmentDoc}`;\n\n/**\n * __useCreateSubMutation__\n *\n * To run a mutation, you first call `useCreateSubMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateSubMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createSubMutation, { data, loading, error }] = useCreateSubMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreateSubMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateSubDocument, options);\n}\nexport const CreateSubFromContactDocument = gql`\n    mutation CreateSubFromContact($token: String!, $emails: String!) {\n  createSubFromContact(token: $token, emails: $emails) {\n    ...RegularSubResponse\n  }\n}\n    ${RegularSubResponseFragmentDoc}`;\n\n/**\n * __useCreateSubFromContactMutation__\n *\n * To run a mutation, you first call `useCreateSubFromContactMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateSubFromContactMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createSubFromContactMutation, { data, loading, error }] = useCreateSubFromContactMutation({\n *   variables: {\n *      token: // value for 'token'\n *      emails: // value for 'emails'\n *   },\n * });\n */\nexport function useCreateSubFromContactMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateSubFromContactDocument, options);\n}\nexport const CreateSubFromInviteDocument = gql`\n    mutation CreateSubFromInvite($input: SubInviteInput!) {\n  createSubFromInvite(input: $input) {\n    ...RegularSubResponse\n  }\n}\n    ${RegularSubResponseFragmentDoc}`;\n\n/**\n * __useCreateSubFromInviteMutation__\n *\n * To run a mutation, you first call `useCreateSubFromInviteMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateSubFromInviteMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createSubFromInviteMutation, { data, loading, error }] = useCreateSubFromInviteMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreateSubFromInviteMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateSubFromInviteDocument, options);\n}\nexport const CreateSubscriptionDocument = gql`\n    mutation CreateSubscription($source: String!, $ccLast4: String!) {\n  createSubscription(source: $source, ccLast4: $ccLast4) {\n    ...ProfileUserResponse\n  }\n}\n    ${ProfileUserResponseFragmentDoc}`;\n\n/**\n * __useCreateSubscriptionMutation__\n *\n * To run a mutation, you first call `useCreateSubscriptionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateSubscriptionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createSubscriptionMutation, { data, loading, error }] = useCreateSubscriptionMutation({\n *   variables: {\n *      source: // value for 'source'\n *      ccLast4: // value for 'ccLast4'\n *   },\n * });\n */\nexport function useCreateSubscriptionMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateSubscriptionDocument, options);\n}\nexport const CreateSubsfrwdpageDocument = gql`\n    mutation CreateSubsfrwdpage($token: String!, $name: String!, $frequency: Float!, $email: String!) {\n  createSubsfrwdpage(\n    token: $token\n    name: $name\n    frequency: $frequency\n    email: $email\n  ) {\n    ...RegularSubResponse\n  }\n}\n    ${RegularSubResponseFragmentDoc}`;\n\n/**\n * __useCreateSubsfrwdpageMutation__\n *\n * To run a mutation, you first call `useCreateSubsfrwdpageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateSubsfrwdpageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createSubsfrwdpageMutation, { data, loading, error }] = useCreateSubsfrwdpageMutation({\n *   variables: {\n *      token: // value for 'token'\n *      name: // value for 'name'\n *      frequency: // value for 'frequency'\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useCreateSubsfrwdpageMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateSubsfrwdpageDocument, options);\n}\nexport const DeleteQuoteDocument = gql`\n    mutation DeleteQuote($id: Int!) {\n  deleteQuote(id: $id)\n}\n    `;\n\n/**\n * __useDeleteQuoteMutation__\n *\n * To run a mutation, you first call `useDeleteQuoteMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteQuoteMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteQuoteMutation, { data, loading, error }] = useDeleteQuoteMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteQuoteMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(DeleteQuoteDocument, options);\n}\nexport const DeleteSubDocument = gql`\n    mutation DeleteSub($id: Int!) {\n  deleteSub(id: $id)\n}\n    `;\n\n/**\n * __useDeleteSubMutation__\n *\n * To run a mutation, you first call `useDeleteSubMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteSubMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteSubMutation, { data, loading, error }] = useDeleteSubMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteSubMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(DeleteSubDocument, options);\n}\nexport const DeleteTemplateDocument = gql`\n    mutation DeleteTemplate($id: Int!) {\n  deleteTemplate(id: $id)\n}\n    `;\n\n/**\n * __useDeleteTemplateMutation__\n *\n * To run a mutation, you first call `useDeleteTemplateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTemplateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTemplateMutation, { data, loading, error }] = useDeleteTemplateMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteTemplateMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(DeleteTemplateDocument, options);\n}\nexport const ForgotPasswordDocument = gql`\n    mutation ForgotPassword($email: String!) {\n  forgotPassword(email: $email)\n}\n    `;\n\n/**\n * __useForgotPasswordMutation__\n *\n * To run a mutation, you first call `useForgotPasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useForgotPasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [forgotPasswordMutation, { data, loading, error }] = useForgotPasswordMutation({\n *   variables: {\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useForgotPasswordMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(ForgotPasswordDocument, options);\n}\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(LoginDocument, options);\n}\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(LogoutDocument, options);\n}\nexport const ReSubribeUserExistingCcDocument = gql`\n    mutation ReSubribeUserExistingCC {\n  reSubribeUserExistingCC {\n    ...ProfileUserResponse\n  }\n}\n    ${ProfileUserResponseFragmentDoc}`;\n\n/**\n * __useReSubribeUserExistingCcMutation__\n *\n * To run a mutation, you first call `useReSubribeUserExistingCcMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useReSubribeUserExistingCcMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [reSubribeUserExistingCcMutation, { data, loading, error }] = useReSubribeUserExistingCcMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useReSubribeUserExistingCcMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(ReSubribeUserExistingCcDocument, options);\n}\nexport const ReSubribeUserNewCcDocument = gql`\n    mutation ReSubribeUserNewCC($source: String!, $ccLast4: String!) {\n  reSubribeUserNewCC(source: $source, ccLast4: $ccLast4) {\n    ...ProfileUserResponse\n  }\n}\n    ${ProfileUserResponseFragmentDoc}`;\n\n/**\n * __useReSubribeUserNewCcMutation__\n *\n * To run a mutation, you first call `useReSubribeUserNewCcMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useReSubribeUserNewCcMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [reSubribeUserNewCcMutation, { data, loading, error }] = useReSubribeUserNewCcMutation({\n *   variables: {\n *      source: // value for 'source'\n *      ccLast4: // value for 'ccLast4'\n *   },\n * });\n */\nexport function useReSubribeUserNewCcMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(ReSubribeUserNewCcDocument, options);\n}\nexport const RegisterDocument = gql`\n    mutation Register($options: UsernamePasswordInput!) {\n  register(options: $options) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(RegisterDocument, options);\n}\nexport const CreateTemplatesDocument = gql`\n    mutation createTemplates($input: templateInput!) {\n  createTemplates(input: $input) {\n    ...RegularTemplateResponse\n  }\n}\n    ${RegularTemplateResponseFragmentDoc}`;\n\n/**\n * __useCreateTemplatesMutation__\n *\n * To run a mutation, you first call `useCreateTemplatesMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTemplatesMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTemplatesMutation, { data, loading, error }] = useCreateTemplatesMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreateTemplatesMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateTemplatesDocument, options);\n}\nexport const UnsubscribeSubDocument = gql`\n    mutation UnsubscribeSub($token: String!) {\n  unsubscribeSub(token: $token) {\n    ...RegularSubResponse\n  }\n}\n    ${RegularSubResponseFragmentDoc}`;\n\n/**\n * __useUnsubscribeSubMutation__\n *\n * To run a mutation, you first call `useUnsubscribeSubMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUnsubscribeSubMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [unsubscribeSubMutation, { data, loading, error }] = useUnsubscribeSubMutation({\n *   variables: {\n *      token: // value for 'token'\n *   },\n * });\n */\nexport function useUnsubscribeSubMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(UnsubscribeSubDocument, options);\n}\nexport const UpdateQuoteDocument = gql`\n    mutation UpdateQuote($id: Int!, $name: String!, $catagory: String!) {\n  updateQuote(id: $id, name: $name, catagory: $catagory) {\n    ...RegularQuoteResponse\n  }\n}\n    ${RegularQuoteResponseFragmentDoc}`;\n\n/**\n * __useUpdateQuoteMutation__\n *\n * To run a mutation, you first call `useUpdateQuoteMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateQuoteMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateQuoteMutation, { data, loading, error }] = useUpdateQuoteMutation({\n *   variables: {\n *      id: // value for 'id'\n *      name: // value for 'name'\n *      catagory: // value for 'catagory'\n *   },\n * });\n */\nexport function useUpdateQuoteMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(UpdateQuoteDocument, options);\n}\nexport const UpdateSubDocument = gql`\n    mutation UpdateSub($id: Int!, $name: String!, $email: String!, $subscribed: Boolean!) {\n  updateSub(id: $id, name: $name, email: $email, subscribed: $subscribed) {\n    ...RegularSubResponse\n  }\n}\n    ${RegularSubResponseFragmentDoc}`;\n\n/**\n * __useUpdateSubMutation__\n *\n * To run a mutation, you first call `useUpdateSubMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateSubMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateSubMutation, { data, loading, error }] = useUpdateSubMutation({\n *   variables: {\n *      id: // value for 'id'\n *      name: // value for 'name'\n *      email: // value for 'email'\n *      subscribed: // value for 'subscribed'\n *   },\n * });\n */\nexport function useUpdateSubMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(UpdateSubDocument, options);\n}\nexport const UpdateUserDocument = gql`\n    mutation UpdateUser($input: UserInput!) {\n  updateUser(input: $input) {\n    ...ProfileUserResponse\n  }\n}\n    ${ProfileUserResponseFragmentDoc}`;\n\n/**\n * __useUpdateUserMutation__\n *\n * To run a mutation, you first call `useUpdateUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateUserMutation, { data, loading, error }] = useUpdateUserMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpdateUserMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(UpdateUserDocument, options);\n}\nexport const UpdateUserAuthDocument = gql`\n    mutation UpdateUserAuth($input: UserAuthInput!) {\n  updateAuth(input: $input) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\n\n/**\n * __useUpdateUserAuthMutation__\n *\n * To run a mutation, you first call `useUpdateUserAuthMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateUserAuthMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateUserAuthMutation, { data, loading, error }] = useUpdateUserAuthMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpdateUserAuthMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(UpdateUserAuthDocument, options);\n}\nexport const AllsubsDocument = gql`\n    query Allsubs {\n  Allsubs {\n    ...AllsubSnippet\n  }\n}\n    ${AllsubSnippetFragmentDoc}`;\n/**\n * __useAllsubsQuery__\n *\n * To run a query within a React component, call `useAllsubsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllsubsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllsubsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useAllsubsQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(AllsubsDocument, options);\n}\nexport function useAllsubsLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(AllsubsDocument, options);\n}\nexport const AllsubsIdDocument = gql`\n    query AllsubsId($Id: Int!) {\n  AllsubsId(Id: $Id) {\n    ...AllsubSnippet\n  }\n}\n    ${AllsubSnippetFragmentDoc}`;\n/**\n * __useAllsubsIdQuery__\n *\n * To run a query within a React component, call `useAllsubsIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllsubsIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllsubsIdQuery({\n *   variables: {\n *      Id: // value for 'Id'\n *   },\n * });\n */\n\nexport function useAllsubsIdQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(AllsubsIdDocument, options);\n}\nexport function useAllsubsIdLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(AllsubsIdDocument, options);\n}\nexport const MailActivityByIdDocument = gql`\n    query mailActivityById($id: Int!) {\n  mailActivityById(id: $id) {\n    ...ActivitySnippet\n  }\n}\n    ${ActivitySnippetFragmentDoc}`;\n/**\n * __useMailActivityByIdQuery__\n *\n * To run a query within a React component, call `useMailActivityByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useMailActivityByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMailActivityByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function useMailActivityByIdQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(MailActivityByIdDocument, options);\n}\nexport function useMailActivityByIdLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(MailActivityByIdDocument, options);\n}\nexport const PaginatedActivityDocument = gql`\n    query paginatedActivity($limit: Int!, $cursor: String) {\n  PaginatedmailActivity(limit: $limit, cursor: $cursor) {\n    hasMore\n    PaginatedmailActivity {\n      ...PaginatedActivitySnippet\n    }\n  }\n}\n    ${PaginatedActivitySnippetFragmentDoc}`;\n/**\n * __usePaginatedActivityQuery__\n *\n * To run a query within a React component, call `usePaginatedActivityQuery` and pass it any options that fit your needs.\n * When your component renders, `usePaginatedActivityQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePaginatedActivityQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\n\nexport function usePaginatedActivityQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(PaginatedActivityDocument, options);\n}\nexport function usePaginatedActivityLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(PaginatedActivityDocument, options);\n}\nexport const MailActivitybyIdDocument = gql`\n    query mailActivitybyId($limit: Int!, $cursor: String, $id: Int!) {\n  PaginatedmailActivitybyId(limit: $limit, cursor: $cursor, id: $id) {\n    hasMore\n    PaginatedmailActivity {\n      ...PaginatedActivitySnippet\n    }\n  }\n}\n    ${PaginatedActivitySnippetFragmentDoc}`;\n/**\n * __useMailActivitybyIdQuery__\n *\n * To run a query within a React component, call `useMailActivitybyIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useMailActivitybyIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMailActivitybyIdQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      cursor: // value for 'cursor'\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function useMailActivitybyIdQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(MailActivitybyIdDocument, options);\n}\nexport function useMailActivitybyIdLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(MailActivitybyIdDocument, options);\n}\nexport const QuotesDocument = gql`\n    query Quotes($limit: Int!, $cursor: String) {\n  quotes(limit: $limit, cursor: $cursor) {\n    hasMore\n    quotes {\n      ...QuoteSnippet\n    }\n  }\n}\n    ${QuoteSnippetFragmentDoc}`;\n/**\n * __useQuotesQuery__\n *\n * To run a query within a React component, call `useQuotesQuery` and pass it any options that fit your needs.\n * When your component renders, `useQuotesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useQuotesQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\n\nexport function useQuotesQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(QuotesDocument, options);\n}\nexport function useQuotesLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(QuotesDocument, options);\n}\nexport const SubsDocument = gql`\n    query Subs($limit: Int!, $cursor: String) {\n  subs(limit: $limit, cursor: $cursor) {\n    hasMore\n    subs {\n      ...SubSnippet\n    }\n  }\n}\n    ${SubSnippetFragmentDoc}`;\n/**\n * __useSubsQuery__\n *\n * To run a query within a React component, call `useSubsQuery` and pass it any options that fit your needs.\n * When your component renders, `useSubsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSubsQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\n\nexport function useSubsQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(SubsDocument, options);\n}\nexport function useSubsLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(SubsDocument, options);\n}\nexport const AlluserDocument = gql`\n    query alluser {\n  alluser {\n    ...alluserSnippet\n  }\n}\n    ${AlluserSnippetFragmentDoc}`;\n/**\n * __useAlluserQuery__\n *\n * To run a query within a React component, call `useAlluserQuery` and pass it any options that fit your needs.\n * When your component renders, `useAlluserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAlluserQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useAlluserQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(AlluserDocument, options);\n}\nexport function useAlluserLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(AlluserDocument, options);\n}\nexport const MailActivityDocument = gql`\n    query mailActivity {\n  mailActivity {\n    ...ActivitySnippet\n  }\n}\n    ${ActivitySnippetFragmentDoc}`;\n/**\n * __useMailActivityQuery__\n *\n * To run a query within a React component, call `useMailActivityQuery` and pass it any options that fit your needs.\n * When your component renders, `useMailActivityQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMailActivityQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMailActivityQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(MailActivityDocument, options);\n}\nexport function useMailActivityLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(MailActivityDocument, options);\n}\nexport const MeDocument = gql`\n    query Me {\n  me {\n    ...RegularUser\n  }\n}\n    ${RegularUserFragmentDoc}`;\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(MeDocument, options);\n}\nexport function useMeLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(MeDocument, options);\n}\nexport const ProfileDocument = gql`\n    query Profile {\n  me {\n    ...ProfileUser\n  }\n}\n    ${ProfileUserFragmentDoc}`;\n/**\n * __useProfileQuery__\n *\n * To run a query within a React component, call `useProfileQuery` and pass it any options that fit your needs.\n * When your component renders, `useProfileQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProfileQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useProfileQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(ProfileDocument, options);\n}\nexport function useProfileLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(ProfileDocument, options);\n}\nexport const SubbytokenDocument = gql`\n    query subbytoken($token: String!) {\n  subbytoken(token: $token) {\n    ...SubSnippet\n  }\n}\n    ${SubSnippetFragmentDoc}`;\n/**\n * __useSubbytokenQuery__\n *\n * To run a query within a React component, call `useSubbytokenQuery` and pass it any options that fit your needs.\n * When your component renders, `useSubbytokenQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSubbytokenQuery({\n *   variables: {\n *      token: // value for 'token'\n *   },\n * });\n */\n\nexport function useSubbytokenQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(SubbytokenDocument, options);\n}\nexport function useSubbytokenLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(SubbytokenDocument, options);\n}\nexport const GetAlltemplatesDocument = gql`\n    query GetAlltemplates($limit: Int!, $cursor: String) {\n  getAlltemplates(limit: $limit, cursor: $cursor) {\n    hasMore\n    templates {\n      ...TemplatesSnippet\n    }\n  }\n}\n    ${TemplatesSnippetFragmentDoc}`;\n/**\n * __useGetAlltemplatesQuery__\n *\n * To run a query within a React component, call `useGetAlltemplatesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAlltemplatesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAlltemplatesQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\n\nexport function useGetAlltemplatesQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(GetAlltemplatesDocument, options);\n}\nexport function useGetAlltemplatesLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(GetAlltemplatesDocument, options);\n}","map":{"version":3,"sources":["D:/Development/QA/OldQA/web/src/generated/graphql.tsx"],"names":["gql","Apollo","defaultOptions","RegularMailResponesFragmentDoc","ActivitySnippetFragmentDoc","AllsubSnippetFragmentDoc","PaginatedActivitySnippetFragmentDoc","RegularErrorFragmentDoc","ProfileUserFragmentDoc","ProfileUserResponseFragmentDoc","QuoteSnippetFragmentDoc","RegularTemplatesFragmentDoc","RegularTemplateResponseFragmentDoc","RegularQuoteFragmentDoc","RegularQuoteResponseFragmentDoc","RegularSubFragmentDoc","RegularSubResponseFragmentDoc","RegularUserFragmentDoc","RegularUserResponseFragmentDoc","SubSnippetFragmentDoc","TemplatesSnippetFragmentDoc","AlluserSnippetFragmentDoc","UpdateTemplatesDocument","useUpdateTemplatesMutation","baseOptions","options","useMutation","AcceptInviteDocument","useAcceptInviteMutation","CancelSubscriptionDocument","useCancelSubscriptionMutation","ChangeCreditCardDocument","useChangeCreditCardMutation","ChangePasswordDocument","useChangePasswordMutation","UpdateMailandFrequencyDocument","useUpdateMailandFrequencyMutation","CreateQuoteDocument","useCreateQuoteMutation","CreateSubDocument","useCreateSubMutation","CreateSubFromContactDocument","useCreateSubFromContactMutation","CreateSubFromInviteDocument","useCreateSubFromInviteMutation","CreateSubscriptionDocument","useCreateSubscriptionMutation","CreateSubsfrwdpageDocument","useCreateSubsfrwdpageMutation","DeleteQuoteDocument","useDeleteQuoteMutation","DeleteSubDocument","useDeleteSubMutation","DeleteTemplateDocument","useDeleteTemplateMutation","ForgotPasswordDocument","useForgotPasswordMutation","LoginDocument","useLoginMutation","LogoutDocument","useLogoutMutation","ReSubribeUserExistingCcDocument","useReSubribeUserExistingCcMutation","ReSubribeUserNewCcDocument","useReSubribeUserNewCcMutation","RegisterDocument","useRegisterMutation","CreateTemplatesDocument","useCreateTemplatesMutation","UnsubscribeSubDocument","useUnsubscribeSubMutation","UpdateQuoteDocument","useUpdateQuoteMutation","UpdateSubDocument","useUpdateSubMutation","UpdateUserDocument","useUpdateUserMutation","UpdateUserAuthDocument","useUpdateUserAuthMutation","AllsubsDocument","useAllsubsQuery","useQuery","useAllsubsLazyQuery","useLazyQuery","AllsubsIdDocument","useAllsubsIdQuery","useAllsubsIdLazyQuery","MailActivityByIdDocument","useMailActivityByIdQuery","useMailActivityByIdLazyQuery","PaginatedActivityDocument","usePaginatedActivityQuery","usePaginatedActivityLazyQuery","MailActivitybyIdDocument","useMailActivitybyIdQuery","useMailActivitybyIdLazyQuery","QuotesDocument","useQuotesQuery","useQuotesLazyQuery","SubsDocument","useSubsQuery","useSubsLazyQuery","AlluserDocument","useAlluserQuery","useAlluserLazyQuery","MailActivityDocument","useMailActivityQuery","useMailActivityLazyQuery","MeDocument","useMeQuery","useMeLazyQuery","ProfileDocument","useProfileQuery","useProfileLazyQuery","SubbytokenDocument","useSubbytokenQuery","useSubbytokenLazyQuery","GetAlltemplatesDocument","useGetAlltemplatesQuery","useGetAlltemplatesLazyQuery"],"mappings":";;;;;;AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,OAAO,KAAKC,MAAZ,MAAwB,gBAAxB;AAGA,MAAMC,cAAc,GAAI,EAAxB;AACA;;AA4nCA,OAAO,MAAMC,8BAA8B,GAAGH,GAAI;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAZO;AAaP,OAAO,MAAMI,0BAA0B,GAAGJ,GAAI;AAC9C;AACA;AACA;AACA;AACA;AACA,MAAMG,8BAA+B,EAN9B;AAOP,OAAO,MAAME,wBAAwB,GAAGL,GAAI;AAC5C;AACA;AACA;AACA;AACA,KALO;AAMP,OAAO,MAAMM,mCAAmC,GAAGN,GAAI;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAzBO;AA0BP,OAAO,MAAMO,uBAAuB,GAAGP,GAAI;AAC3C;AACA;AACA;AACA;AACA,KALO;AAMP,OAAO,MAAMQ,sBAAsB,GAAGR,GAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAtBO;AAuBP,OAAO,MAAMS,8BAA8B,GAAGT,GAAI;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMO,uBAAwB;AAC9B,EAAEC,sBAAuB,EAVlB;AAWP,OAAO,MAAME,uBAAuB,GAAGV,GAAI;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAXO;AAYP,OAAO,MAAMW,2BAA2B,GAAGX,GAAI;AAC/C;AACA;AACA;AACA,KAJO;AAKP,OAAO,MAAMY,kCAAkC,GAAGZ,GAAI;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMO,uBAAwB;AAC9B,EAAEI,2BAA4B,EAVvB;AAWP,OAAO,MAAME,uBAAuB,GAAGb,GAAI;AAC3C;AACA;AACA;AACA,KAJO;AAKP,OAAO,MAAMc,+BAA+B,GAAGd,GAAI;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMO,uBAAwB;AAC9B,EAAEM,uBAAwB,EAVnB;AAWP,OAAO,MAAME,qBAAqB,GAAGf,GAAI;AACzC;AACA;AACA;AACA,KAJO;AAKP,OAAO,MAAMgB,6BAA6B,GAAGhB,GAAI;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMO,uBAAwB;AAC9B,EAAEQ,qBAAsB,EAVjB;AAWP,OAAO,MAAME,sBAAsB,GAAGjB,GAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,KAPO;AAQP,OAAO,MAAMkB,8BAA8B,GAAGlB,GAAI;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMO,uBAAwB;AAC9B,EAAEU,sBAAuB,EAVlB;AAWP,OAAO,MAAME,qBAAqB,GAAGnB,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAdO;AAeP,OAAO,MAAMoB,2BAA2B,GAAGpB,GAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KATO;AAUP,OAAO,MAAMqB,yBAAyB,GAAGrB,GAAI;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,KAPO;AAQP,OAAO,MAAMsB,uBAAuB,GAAGtB,GAAI;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMY,kCAAmC,EAZlC;;AAeP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASW,0BAAT,CAAoCC,WAApC,EAAyI;AACxI,QAAMC,OAAO,mCAAOvB,cAAP,GAA0BsB,WAA1B,CAAb;;AACA,SAAOvB,MAAM,CAACyB,WAAP,CAA8EJ,uBAA9E,EAAuGG,OAAvG,CAAP;AACD;AAIP,OAAO,MAAME,oBAAoB,GAAG3B,GAAI;AACxC;AACA;AACA;AACA;AACA;AAC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O,MAAM8C,mBAAmB,GAAGvE,GAAI;AACvC;AACA;AACA;AACA;AACA;AACA,MAAMc,+BAAgC,EAN/B;;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS0D,sBAAT,CAAgChD,WAAhC,EAA6H;AAC5H,QAAMC,OAAO,mCAAOvB,cAAP,GAA0BsB,WAA1B,CAAb;;AACA,SAAOvB,MAAM,CAACyB,WAAP,CAAsE6C,mBAAtE,EAA2F9C,OAA3F,CAAP;AACD;AAIP,OAAO,MAAMgD,iBAAiB,GAAGzE,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA,MAAMgB,6BAA8B,EAN7B;;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS0D,oBAAT,CAA8BlD,WAA9B,EAAuH;AACtH,QAAMC,OAAO,mCAAOvB,cAAP,GAA0BsB,WAA1B,CAAb;;AACA,SAAOvB,MAAM,CAACyB,WAAP,CAAkE+C,iBAAlE,EAAqFhD,OAArF,CAAP;AACD;AAIP,OAAO,MAAMkD,kBAAkB,GAAG3E,GAAI;AACtC;AACA;AACA;AACA;AACA;AACA,MAAMS,8BAA+B,EAN9B;;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASmE,qBAAT,CAA+BpD,WAA/B,EAA0H;AACzH,QAAMC,OAAO,mCAAOvB,cAAP,GAA0BsB,WAA1B,CAAb;;AACA,SAAOvB,MAAM,CAACyB,WAAP,CAAoEiD,kBAApE,EAAwFlD,OAAxF,CAAP;AACD;AAIP,OAAO,MAAMoD,sBAAsB,GAAG7E,GAAI;AAC1C;AACA;AACA;AACA;AACA;AACA,MAAMkB,8BAA+B,EAN9B;;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,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","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  alluser?: Maybe<Alluser>;\n  me?: Maybe<User>;\n  quotes: PaginatedQuotes;\n  quote?: Maybe<Quote>;\n  subs: PaginatedSubs;\n  Allsubs: SubsCount;\n  AllsubsId: SubsCount;\n  sub?: Maybe<Sub>;\n  subbytoken?: Maybe<Sub>;\n  temp?: Maybe<Templates>;\n  getAlltemplates: PaginatedTemplates;\n  mailActivity: ActivityRespone;\n  mailActivityById: ActivityRespone;\n  PaginatedmailActivitybyId: PaginatedActivity;\n  PaginatedmailActivity: PaginatedActivity;\n};\n\n\nexport type QueryQuotesArgs = {\n  cursor?: Maybe<Scalars['String']>;\n  limit: Scalars['Int'];\n};\n\n\nexport type QueryQuoteArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type QuerySubsArgs = {\n  cursor?: Maybe<Scalars['String']>;\n  limit: Scalars['Int'];\n};\n\n\nexport type QueryAllsubsIdArgs = {\n  Id: Scalars['Int'];\n};\n\n\nexport type QuerySubArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type QuerySubbytokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryTempArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type QueryGetAlltemplatesArgs = {\n  cursor?: Maybe<Scalars['String']>;\n  limit: Scalars['Int'];\n};\n\n\nexport type QueryMailActivityByIdArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type QueryPaginatedmailActivitybyIdArgs = {\n  cursor?: Maybe<Scalars['String']>;\n  limit: Scalars['Int'];\n  id: Scalars['Int'];\n};\n\n\nexport type QueryPaginatedmailActivityArgs = {\n  cursor?: Maybe<Scalars['String']>;\n  limit: Scalars['Int'];\n};\n\nexport type Alluser = {\n  __typename?: 'Alluser';\n  user?: Maybe<Array<User>>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['Float'];\n  role: Scalars['String'];\n  inviteLink: Scalars['String'];\n  email: Scalars['String'];\n  customerType: Scalars['String'];\n  ccLast4: Scalars['String'];\n  catagory: Scalars['String'];\n  name: Scalars['String'];\n  address: Scalars['String'];\n  city: Scalars['String'];\n  state: Scalars['String'];\n  zip: Scalars['String'];\n  company: Scalars['String'];\n  title: Scalars['String'];\n  DefaultTemplates: Scalars['Boolean'];\n  linkedIn: Scalars['String'];\n  twitter: Scalars['String'];\n  facebook: Scalars['String'];\n  website: Scalars['String'];\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type PaginatedQuotes = {\n  __typename?: 'PaginatedQuotes';\n  quotes: Array<Quote>;\n  hasMore: Scalars['Boolean'];\n};\n\nexport type Quote = {\n  __typename?: 'Quote';\n  id: Scalars['Float'];\n  name: Scalars['String'];\n  catagory: Scalars['String'];\n  creatorId: Scalars['Float'];\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n  user: User;\n};\n\nexport type PaginatedSubs = {\n  __typename?: 'PaginatedSubs';\n  subs: Array<Sub>;\n  hasMore: Scalars['Boolean'];\n};\n\nexport type Sub = {\n  __typename?: 'Sub';\n  id: Scalars['Float'];\n  name: Scalars['String'];\n  email: Scalars['String'];\n  unsubscribeToken: Scalars['String'];\n  subscribed: Scalars['Boolean'];\n  creatorId: Scalars['Float'];\n  frequency: Scalars['Float'];\n  creator: User;\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type SubsCount = {\n  __typename?: 'SubsCount';\n  ActiveCount: Scalars['Float'];\n  NonActiveCount: Scalars['Float'];\n};\n\nexport type Templates = {\n  __typename?: 'Templates';\n  id: Scalars['Float'];\n  title: Scalars['String'];\n  subject: Scalars['String'];\n  body: Scalars['String'];\n  creatorId: Scalars['Float'];\n  Active: Scalars['Boolean'];\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type PaginatedTemplates = {\n  __typename?: 'PaginatedTemplates';\n  templates: Array<Templates>;\n  hasMore: Scalars['Boolean'];\n};\n\nexport type ActivityRespone = {\n  __typename?: 'ActivityRespone';\n  mailActivity?: Maybe<Array<MailActivity>>;\n};\n\nexport type MailActivity = {\n  __typename?: 'MailActivity';\n  id: Scalars['Float'];\n  From_Email?: Maybe<Scalars['String']>;\n  To_Email?: Maybe<Scalars['String']>;\n  subject?: Maybe<Scalars['String']>;\n  body?: Maybe<Scalars['String']>;\n  Status?: Maybe<Scalars['String']>;\n  msgid?: Maybe<Scalars['String']>;\n  xmsgid?: Maybe<Scalars['String']>;\n  creatorId?: Maybe<Scalars['Float']>;\n  subsid?: Maybe<Scalars['Float']>;\n  open_count?: Maybe<Scalars['Float']>;\n  clicks_count?: Maybe<Scalars['Float']>;\n  createdAt: Scalars['String'];\n  type?: Maybe<Scalars['String']>;\n  Author?: Maybe<Scalars['String']>;\n  user: User;\n  subs: Sub;\n};\n\nexport type PaginatedActivity = {\n  __typename?: 'PaginatedActivity';\n  PaginatedmailActivity: Array<MailActivity>;\n  hasMore: Scalars['Boolean'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  changePassword: UserResponse;\n  updateUser: UserResponse;\n  updateAuth: UserResponse;\n  forgotPassword: Scalars['Boolean'];\n  register: UserResponse;\n  login: UserResponse;\n  createSubscription: UserResponse;\n  reSubribeUserNewCC: UserResponse;\n  reSubribeUserExistingCC: UserResponse;\n  changeCreditCard: UserResponse;\n  cancelSubscription: UserResponse;\n  logout: Scalars['Boolean'];\n  createQuote: QuoteResponse;\n  updateQuote?: Maybe<QuoteResponse>;\n  deleteQuote: Scalars['Boolean'];\n  createSub: SubResponse;\n  createSubFromContact: SubResponse;\n  createSubFromInvite: SubResponse;\n  acceptInvite: SubResponse;\n  updateSub: SubResponse;\n  updateMailandFrequency: SubResponse;\n  createSubsfrwdpage: SubResponse;\n  unsubscribeSub: SubResponse;\n  deleteSub: Scalars['Boolean'];\n  createTemplates: TemplateRespones;\n  updateTemplates: TemplateRespones;\n  deleteTemplate: Scalars['Boolean'];\n};\n\n\nexport type MutationChangePasswordArgs = {\n  newPassword: Scalars['String'];\n  token: Scalars['String'];\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input: UserInput;\n};\n\n\nexport type MutationUpdateAuthArgs = {\n  input: UserAuthInput;\n};\n\n\nexport type MutationForgotPasswordArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationRegisterArgs = {\n  options: UsernamePasswordInput;\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\n\nexport type MutationCreateSubscriptionArgs = {\n  ccLast4: Scalars['String'];\n  source: Scalars['String'];\n};\n\n\nexport type MutationReSubribeUserNewCcArgs = {\n  ccLast4: Scalars['String'];\n  source: Scalars['String'];\n};\n\n\nexport type MutationChangeCreditCardArgs = {\n  ccLast4: Scalars['String'];\n  source: Scalars['String'];\n};\n\n\nexport type MutationCreateQuoteArgs = {\n  input: QuoteInput;\n};\n\n\nexport type MutationUpdateQuoteArgs = {\n  catagory: Scalars['String'];\n  name: Scalars['String'];\n  id: Scalars['Int'];\n};\n\n\nexport type MutationDeleteQuoteArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type MutationCreateSubArgs = {\n  input: SubInput;\n};\n\n\nexport type MutationCreateSubFromContactArgs = {\n  emails: Scalars['String'];\n  token: Scalars['String'];\n};\n\n\nexport type MutationCreateSubFromInviteArgs = {\n  input: SubInviteInput;\n};\n\n\nexport type MutationAcceptInviteArgs = {\n  frequency: Scalars['Float'];\n  subscribed: Scalars['Boolean'];\n  token: Scalars['String'];\n};\n\n\nexport type MutationUpdateSubArgs = {\n  subscribed: Scalars['Boolean'];\n  email: Scalars['String'];\n  name: Scalars['String'];\n  id: Scalars['Int'];\n};\n\n\nexport type MutationUpdateMailandFrequencyArgs = {\n  email: Scalars['String'];\n  frequency: Scalars['Float'];\n  token: Scalars['String'];\n};\n\n\nexport type MutationCreateSubsfrwdpageArgs = {\n  frequency: Scalars['Float'];\n  email: Scalars['String'];\n  name: Scalars['String'];\n  token: Scalars['String'];\n};\n\n\nexport type MutationUnsubscribeSubArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type MutationDeleteSubArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type MutationCreateTemplatesArgs = {\n  input: TemplateInput;\n};\n\n\nexport type MutationUpdateTemplatesArgs = {\n  Active: Scalars['Boolean'];\n  subject: Scalars['String'];\n  body: Scalars['String'];\n  title: Scalars['String'];\n  id: Scalars['Int'];\n};\n\n\nexport type MutationDeleteTemplateArgs = {\n  id: Scalars['Int'];\n};\n\nexport type UserResponse = {\n  __typename?: 'UserResponse';\n  errors?: Maybe<Array<FieldError>>;\n  user?: Maybe<User>;\n};\n\nexport type FieldError = {\n  __typename?: 'FieldError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type UserInput = {\n  name: Scalars['String'];\n  address: Scalars['String'];\n  city: Scalars['String'];\n  state: Scalars['String'];\n  zip: Scalars['String'];\n  catagory: Scalars['String'];\n  title: Scalars['String'];\n  company: Scalars['String'];\n  twitter: Scalars['String'];\n  facebook: Scalars['String'];\n  linkedIn: Scalars['String'];\n  website: Scalars['String'];\n  DefaultTemplates: Scalars['Boolean'];\n};\n\nexport type UserAuthInput = {\n  email?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  confirm?: Maybe<Scalars['String']>;\n};\n\nexport type UsernamePasswordInput = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type QuoteResponse = {\n  __typename?: 'QuoteResponse';\n  errors?: Maybe<Array<FieldError>>;\n  quote?: Maybe<Quote>;\n};\n\nexport type QuoteInput = {\n  name: Scalars['String'];\n  catagory: Scalars['String'];\n};\n\nexport type SubResponse = {\n  __typename?: 'SubResponse';\n  errors?: Maybe<Array<FieldError>>;\n  sub?: Maybe<Sub>;\n};\n\nexport type SubInput = {\n  name: Scalars['String'];\n  email: Scalars['String'];\n};\n\nexport type SubInviteInput = {\n  name: Scalars['String'];\n  email: Scalars['String'];\n  frequency: Scalars['Float'];\n  token: Scalars['String'];\n};\n\nexport type TemplateRespones = {\n  __typename?: 'TemplateRespones';\n  errors?: Maybe<Array<FieldError>>;\n  template?: Maybe<Templates>;\n};\n\nexport type TemplateInput = {\n  body: Scalars['String'];\n  subject: Scalars['String'];\n  title: Scalars['String'];\n};\n\nexport type ActivitySnippetFragment = (\n  { __typename?: 'ActivityRespone' }\n  & { mailActivity?: Maybe<Array<(\n    { __typename?: 'MailActivity' }\n    & RegularMailResponesFragment\n  )>> }\n);\n\nexport type AllsubSnippetFragment = (\n  { __typename?: 'SubsCount' }\n  & Pick<SubsCount, 'ActiveCount' | 'NonActiveCount'>\n);\n\nexport type PaginatedActivitySnippetFragment = (\n  { __typename?: 'MailActivity' }\n  & Pick<MailActivity, 'id' | 'From_Email' | 'To_Email' | 'subject' | 'Status' | 'msgid' | 'open_count' | 'clicks_count' | 'createdAt' | 'body' | 'creatorId' | 'Author' | 'type' | 'subsid'>\n  & { user: (\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'name'>\n  ), subs: (\n    { __typename?: 'Sub' }\n    & Pick<Sub, 'id' | 'name'>\n  ) }\n);\n\nexport type ProfileUserFragment = (\n  { __typename?: 'User' }\n  & Pick<User, 'id' | 'inviteLink' | 'name' | 'email' | 'address' | 'city' | 'state' | 'zip' | 'role' | 'catagory' | 'title' | 'company' | 'twitter' | 'facebook' | 'linkedIn' | 'website' | 'customerType' | 'ccLast4' | 'DefaultTemplates'>\n);\n\nexport type ProfileUserResponseFragment = (\n  { __typename?: 'UserResponse' }\n  & { errors?: Maybe<Array<(\n    { __typename?: 'FieldError' }\n    & RegularErrorFragment\n  )>>, user?: Maybe<(\n    { __typename?: 'User' }\n    & ProfileUserFragment\n  )> }\n);\n\nexport type QuoteSnippetFragment = (\n  { __typename?: 'Quote' }\n  & Pick<Quote, 'id' | 'name' | 'createdAt' | 'catagory'>\n  & { user: (\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email'>\n  ) }\n);\n\nexport type RegularErrorFragment = (\n  { __typename?: 'FieldError' }\n  & Pick<FieldError, 'field' | 'message'>\n);\n\nexport type RegularMailResponesFragment = (\n  { __typename?: 'MailActivity' }\n  & Pick<MailActivity, 'id' | 'From_Email' | 'To_Email' | 'subject' | 'Status' | 'open_count' | 'clicks_count' | 'msgid' | 'type'>\n);\n\nexport type RegularQuoteFragment = (\n  { __typename?: 'Quote' }\n  & Pick<Quote, 'id'>\n);\n\nexport type RegularSubFragment = (\n  { __typename?: 'Sub' }\n  & Pick<Sub, 'id'>\n);\n\nexport type RegularTemplateResponseFragment = (\n  { __typename?: 'TemplateRespones' }\n  & { errors?: Maybe<Array<(\n    { __typename?: 'FieldError' }\n    & RegularErrorFragment\n  )>>, template?: Maybe<(\n    { __typename?: 'Templates' }\n    & RegularTemplatesFragment\n  )> }\n);\n\nexport type RegularTemplatesFragment = (\n  { __typename?: 'Templates' }\n  & Pick<Templates, 'id'>\n);\n\nexport type RegularUserFragment = (\n  { __typename?: 'User' }\n  & Pick<User, 'id' | 'email' | 'inviteLink' | 'role'>\n);\n\nexport type RegularQuoteResponseFragment = (\n  { __typename?: 'QuoteResponse' }\n  & { errors?: Maybe<Array<(\n    { __typename?: 'FieldError' }\n    & RegularErrorFragment\n  )>>, quote?: Maybe<(\n    { __typename?: 'Quote' }\n    & RegularQuoteFragment\n  )> }\n);\n\nexport type RegularSubResponseFragment = (\n  { __typename?: 'SubResponse' }\n  & { errors?: Maybe<Array<(\n    { __typename?: 'FieldError' }\n    & RegularErrorFragment\n  )>>, sub?: Maybe<(\n    { __typename?: 'Sub' }\n    & RegularSubFragment\n  )> }\n);\n\nexport type RegularUserResponseFragment = (\n  { __typename?: 'UserResponse' }\n  & { errors?: Maybe<Array<(\n    { __typename?: 'FieldError' }\n    & RegularErrorFragment\n  )>>, user?: Maybe<(\n    { __typename?: 'User' }\n    & RegularUserFragment\n  )> }\n);\n\nexport type SubSnippetFragment = (\n  { __typename?: 'Sub' }\n  & Pick<Sub, 'id' | 'createdAt' | 'updatedAt' | 'name' | 'email' | 'subscribed' | 'frequency'>\n  & { creator: (\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email'>\n  ) }\n);\n\nexport type TemplatesSnippetFragment = (\n  { __typename?: 'Templates' }\n  & Pick<Templates, 'id' | 'title' | 'body' | 'subject' | 'Active' | 'createdAt'>\n);\n\nexport type AlluserSnippetFragment = (\n  { __typename?: 'Alluser' }\n  & { user?: Maybe<Array<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'name'>\n  )>> }\n);\n\nexport type UpdateTemplatesMutationVariables = Exact<{\n  id: Scalars['Int'];\n  title: Scalars['String'];\n  body: Scalars['String'];\n  subject: Scalars['String'];\n  Active: Scalars['Boolean'];\n}>;\n\n\nexport type UpdateTemplatesMutation = (\n  { __typename?: 'Mutation' }\n  & { updateTemplates: (\n    { __typename?: 'TemplateRespones' }\n    & RegularTemplateResponseFragment\n  ) }\n);\n\nexport type AcceptInviteMutationVariables = Exact<{\n  token: Scalars['String'];\n  subscribed: Scalars['Boolean'];\n  frequency: Scalars['Float'];\n}>;\n\n\nexport type AcceptInviteMutation = (\n  { __typename?: 'Mutation' }\n  & { acceptInvite: (\n    { __typename?: 'SubResponse' }\n    & RegularSubResponseFragment\n  ) }\n);\n\nexport type CancelSubscriptionMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type CancelSubscriptionMutation = (\n  { __typename?: 'Mutation' }\n  & { cancelSubscription: (\n    { __typename?: 'UserResponse' }\n    & ProfileUserResponseFragment\n  ) }\n);\n\nexport type ChangeCreditCardMutationVariables = Exact<{\n  source: Scalars['String'];\n  ccLast4: Scalars['String'];\n}>;\n\n\nexport type ChangeCreditCardMutation = (\n  { __typename?: 'Mutation' }\n  & { changeCreditCard: (\n    { __typename?: 'UserResponse' }\n    & ProfileUserResponseFragment\n  ) }\n);\n\nexport type ChangePasswordMutationVariables = Exact<{\n  token: Scalars['String'];\n  newPassword: Scalars['String'];\n}>;\n\n\nexport type ChangePasswordMutation = (\n  { __typename?: 'Mutation' }\n  & { changePassword: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type UpdateMailandFrequencyMutationVariables = Exact<{\n  token: Scalars['String'];\n  frequency: Scalars['Float'];\n  email: Scalars['String'];\n}>;\n\n\nexport type UpdateMailandFrequencyMutation = (\n  { __typename?: 'Mutation' }\n  & { updateMailandFrequency: (\n    { __typename?: 'SubResponse' }\n    & RegularSubResponseFragment\n  ) }\n);\n\nexport type CreateQuoteMutationVariables = Exact<{\n  input: QuoteInput;\n}>;\n\n\nexport type CreateQuoteMutation = (\n  { __typename?: 'Mutation' }\n  & { createQuote: (\n    { __typename?: 'QuoteResponse' }\n    & RegularQuoteResponseFragment\n  ) }\n);\n\nexport type CreateSubMutationVariables = Exact<{\n  input: SubInput;\n}>;\n\n\nexport type CreateSubMutation = (\n  { __typename?: 'Mutation' }\n  & { createSub: (\n    { __typename?: 'SubResponse' }\n    & RegularSubResponseFragment\n  ) }\n);\n\nexport type CreateSubFromContactMutationVariables = Exact<{\n  token: Scalars['String'];\n  emails: Scalars['String'];\n}>;\n\n\nexport type CreateSubFromContactMutation = (\n  { __typename?: 'Mutation' }\n  & { createSubFromContact: (\n    { __typename?: 'SubResponse' }\n    & RegularSubResponseFragment\n  ) }\n);\n\nexport type CreateSubFromInviteMutationVariables = Exact<{\n  input: SubInviteInput;\n}>;\n\n\nexport type CreateSubFromInviteMutation = (\n  { __typename?: 'Mutation' }\n  & { createSubFromInvite: (\n    { __typename?: 'SubResponse' }\n    & RegularSubResponseFragment\n  ) }\n);\n\nexport type CreateSubscriptionMutationVariables = Exact<{\n  source: Scalars['String'];\n  ccLast4: Scalars['String'];\n}>;\n\n\nexport type CreateSubscriptionMutation = (\n  { __typename?: 'Mutation' }\n  & { createSubscription: (\n    { __typename?: 'UserResponse' }\n    & ProfileUserResponseFragment\n  ) }\n);\n\nexport type CreateSubsfrwdpageMutationVariables = Exact<{\n  token: Scalars['String'];\n  name: Scalars['String'];\n  frequency: Scalars['Float'];\n  email: Scalars['String'];\n}>;\n\n\nexport type CreateSubsfrwdpageMutation = (\n  { __typename?: 'Mutation' }\n  & { createSubsfrwdpage: (\n    { __typename?: 'SubResponse' }\n    & RegularSubResponseFragment\n  ) }\n);\n\nexport type DeleteQuoteMutationVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type DeleteQuoteMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteQuote'>\n);\n\nexport type DeleteSubMutationVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type DeleteSubMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteSub'>\n);\n\nexport type DeleteTemplateMutationVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type DeleteTemplateMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteTemplate'>\n);\n\nexport type ForgotPasswordMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type ForgotPasswordMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'forgotPassword'>\n);\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type ReSubribeUserExistingCcMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ReSubribeUserExistingCcMutation = (\n  { __typename?: 'Mutation' }\n  & { reSubribeUserExistingCC: (\n    { __typename?: 'UserResponse' }\n    & ProfileUserResponseFragment\n  ) }\n);\n\nexport type ReSubribeUserNewCcMutationVariables = Exact<{\n  source: Scalars['String'];\n  ccLast4: Scalars['String'];\n}>;\n\n\nexport type ReSubribeUserNewCcMutation = (\n  { __typename?: 'Mutation' }\n  & { reSubribeUserNewCC: (\n    { __typename?: 'UserResponse' }\n    & ProfileUserResponseFragment\n  ) }\n);\n\nexport type RegisterMutationVariables = Exact<{\n  options: UsernamePasswordInput;\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { register: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type CreateTemplatesMutationVariables = Exact<{\n  input: TemplateInput;\n}>;\n\n\nexport type CreateTemplatesMutation = (\n  { __typename?: 'Mutation' }\n  & { createTemplates: (\n    { __typename?: 'TemplateRespones' }\n    & RegularTemplateResponseFragment\n  ) }\n);\n\nexport type UnsubscribeSubMutationVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type UnsubscribeSubMutation = (\n  { __typename?: 'Mutation' }\n  & { unsubscribeSub: (\n    { __typename?: 'SubResponse' }\n    & RegularSubResponseFragment\n  ) }\n);\n\nexport type UpdateQuoteMutationVariables = Exact<{\n  id: Scalars['Int'];\n  name: Scalars['String'];\n  catagory: Scalars['String'];\n}>;\n\n\nexport type UpdateQuoteMutation = (\n  { __typename?: 'Mutation' }\n  & { updateQuote?: Maybe<(\n    { __typename?: 'QuoteResponse' }\n    & RegularQuoteResponseFragment\n  )> }\n);\n\nexport type UpdateSubMutationVariables = Exact<{\n  id: Scalars['Int'];\n  name: Scalars['String'];\n  email: Scalars['String'];\n  subscribed: Scalars['Boolean'];\n}>;\n\n\nexport type UpdateSubMutation = (\n  { __typename?: 'Mutation' }\n  & { updateSub: (\n    { __typename?: 'SubResponse' }\n    & RegularSubResponseFragment\n  ) }\n);\n\nexport type UpdateUserMutationVariables = Exact<{\n  input: UserInput;\n}>;\n\n\nexport type UpdateUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateUser: (\n    { __typename?: 'UserResponse' }\n    & ProfileUserResponseFragment\n  ) }\n);\n\nexport type UpdateUserAuthMutationVariables = Exact<{\n  input: UserAuthInput;\n}>;\n\n\nexport type UpdateUserAuthMutation = (\n  { __typename?: 'Mutation' }\n  & { updateAuth: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type AllsubsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type AllsubsQuery = (\n  { __typename?: 'Query' }\n  & { Allsubs: (\n    { __typename?: 'SubsCount' }\n    & AllsubSnippetFragment\n  ) }\n);\n\nexport type AllsubsIdQueryVariables = Exact<{\n  Id: Scalars['Int'];\n}>;\n\n\nexport type AllsubsIdQuery = (\n  { __typename?: 'Query' }\n  & { AllsubsId: (\n    { __typename?: 'SubsCount' }\n    & AllsubSnippetFragment\n  ) }\n);\n\nexport type MailActivityByIdQueryVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type MailActivityByIdQuery = (\n  { __typename?: 'Query' }\n  & { mailActivityById: (\n    { __typename?: 'ActivityRespone' }\n    & ActivitySnippetFragment\n  ) }\n);\n\nexport type PaginatedActivityQueryVariables = Exact<{\n  limit: Scalars['Int'];\n  cursor?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type PaginatedActivityQuery = (\n  { __typename?: 'Query' }\n  & { PaginatedmailActivity: (\n    { __typename?: 'PaginatedActivity' }\n    & Pick<PaginatedActivity, 'hasMore'>\n    & { PaginatedmailActivity: Array<(\n      { __typename?: 'MailActivity' }\n      & PaginatedActivitySnippetFragment\n    )> }\n  ) }\n);\n\nexport type MailActivitybyIdQueryVariables = Exact<{\n  limit: Scalars['Int'];\n  cursor?: Maybe<Scalars['String']>;\n  id: Scalars['Int'];\n}>;\n\n\nexport type MailActivitybyIdQuery = (\n  { __typename?: 'Query' }\n  & { PaginatedmailActivitybyId: (\n    { __typename?: 'PaginatedActivity' }\n    & Pick<PaginatedActivity, 'hasMore'>\n    & { PaginatedmailActivity: Array<(\n      { __typename?: 'MailActivity' }\n      & PaginatedActivitySnippetFragment\n    )> }\n  ) }\n);\n\nexport type QuotesQueryVariables = Exact<{\n  limit: Scalars['Int'];\n  cursor?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type QuotesQuery = (\n  { __typename?: 'Query' }\n  & { quotes: (\n    { __typename?: 'PaginatedQuotes' }\n    & Pick<PaginatedQuotes, 'hasMore'>\n    & { quotes: Array<(\n      { __typename?: 'Quote' }\n      & QuoteSnippetFragment\n    )> }\n  ) }\n);\n\nexport type SubsQueryVariables = Exact<{\n  limit: Scalars['Int'];\n  cursor?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type SubsQuery = (\n  { __typename?: 'Query' }\n  & { subs: (\n    { __typename?: 'PaginatedSubs' }\n    & Pick<PaginatedSubs, 'hasMore'>\n    & { subs: Array<(\n      { __typename?: 'Sub' }\n      & SubSnippetFragment\n    )> }\n  ) }\n);\n\nexport type AlluserQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type AlluserQuery = (\n  { __typename?: 'Query' }\n  & { alluser?: Maybe<(\n    { __typename?: 'Alluser' }\n    & AlluserSnippetFragment\n  )> }\n);\n\nexport type MailActivityQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MailActivityQuery = (\n  { __typename?: 'Query' }\n  & { mailActivity: (\n    { __typename?: 'ActivityRespone' }\n    & ActivitySnippetFragment\n  ) }\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'User' }\n    & RegularUserFragment\n  )> }\n);\n\nexport type ProfileQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ProfileQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'User' }\n    & ProfileUserFragment\n  )> }\n);\n\nexport type SubbytokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type SubbytokenQuery = (\n  { __typename?: 'Query' }\n  & { subbytoken?: Maybe<(\n    { __typename?: 'Sub' }\n    & SubSnippetFragment\n  )> }\n);\n\nexport type GetAlltemplatesQueryVariables = Exact<{\n  limit: Scalars['Int'];\n  cursor?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type GetAlltemplatesQuery = (\n  { __typename?: 'Query' }\n  & { getAlltemplates: (\n    { __typename?: 'PaginatedTemplates' }\n    & Pick<PaginatedTemplates, 'hasMore'>\n    & { templates: Array<(\n      { __typename?: 'Templates' }\n      & TemplatesSnippetFragment\n    )> }\n  ) }\n);\n\nexport const RegularMailResponesFragmentDoc = gql`\n    fragment RegularMailRespones on MailActivity {\n  id\n  From_Email\n  To_Email\n  subject\n  Status\n  open_count\n  clicks_count\n  msgid\n  type\n}\n    `;\nexport const ActivitySnippetFragmentDoc = gql`\n    fragment ActivitySnippet on ActivityRespone {\n  mailActivity {\n    ...RegularMailRespones\n  }\n}\n    ${RegularMailResponesFragmentDoc}`;\nexport const AllsubSnippetFragmentDoc = gql`\n    fragment AllsubSnippet on SubsCount {\n  ActiveCount\n  NonActiveCount\n}\n    `;\nexport const PaginatedActivitySnippetFragmentDoc = gql`\n    fragment PaginatedActivitySnippet on MailActivity {\n  id\n  From_Email\n  To_Email\n  subject\n  Status\n  msgid\n  open_count\n  clicks_count\n  createdAt\n  body\n  creatorId\n  Author\n  type\n  subsid\n  user {\n    id\n    name\n  }\n  subs {\n    id\n    name\n  }\n}\n    `;\nexport const RegularErrorFragmentDoc = gql`\n    fragment RegularError on FieldError {\n  field\n  message\n}\n    `;\nexport const ProfileUserFragmentDoc = gql`\n    fragment ProfileUser on User {\n  id\n  inviteLink\n  name\n  email\n  address\n  city\n  state\n  zip\n  role\n  catagory\n  title\n  company\n  twitter\n  facebook\n  linkedIn\n  website\n  customerType\n  ccLast4\n  DefaultTemplates\n}\n    `;\nexport const ProfileUserResponseFragmentDoc = gql`\n    fragment ProfileUserResponse on UserResponse {\n  errors {\n    ...RegularError\n  }\n  user {\n    ...ProfileUser\n  }\n}\n    ${RegularErrorFragmentDoc}\n${ProfileUserFragmentDoc}`;\nexport const QuoteSnippetFragmentDoc = gql`\n    fragment QuoteSnippet on Quote {\n  id\n  name\n  user {\n    id\n    email\n  }\n  createdAt\n  catagory\n}\n    `;\nexport const RegularTemplatesFragmentDoc = gql`\n    fragment RegularTemplates on Templates {\n  id\n}\n    `;\nexport const RegularTemplateResponseFragmentDoc = gql`\n    fragment RegularTemplateResponse on TemplateRespones {\n  errors {\n    ...RegularError\n  }\n  template {\n    ...RegularTemplates\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularTemplatesFragmentDoc}`;\nexport const RegularQuoteFragmentDoc = gql`\n    fragment RegularQuote on Quote {\n  id\n}\n    `;\nexport const RegularQuoteResponseFragmentDoc = gql`\n    fragment RegularQuoteResponse on QuoteResponse {\n  errors {\n    ...RegularError\n  }\n  quote {\n    ...RegularQuote\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularQuoteFragmentDoc}`;\nexport const RegularSubFragmentDoc = gql`\n    fragment RegularSub on Sub {\n  id\n}\n    `;\nexport const RegularSubResponseFragmentDoc = gql`\n    fragment RegularSubResponse on SubResponse {\n  errors {\n    ...RegularError\n  }\n  sub {\n    ...RegularSub\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularSubFragmentDoc}`;\nexport const RegularUserFragmentDoc = gql`\n    fragment RegularUser on User {\n  id\n  email\n  inviteLink\n  role\n}\n    `;\nexport const RegularUserResponseFragmentDoc = gql`\n    fragment RegularUserResponse on UserResponse {\n  errors {\n    ...RegularError\n  }\n  user {\n    ...RegularUser\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularUserFragmentDoc}`;\nexport const SubSnippetFragmentDoc = gql`\n    fragment SubSnippet on Sub {\n  id\n  createdAt\n  updatedAt\n  name\n  email\n  subscribed\n  frequency\n  creator {\n    id\n    email\n  }\n}\n    `;\nexport const TemplatesSnippetFragmentDoc = gql`\n    fragment TemplatesSnippet on Templates {\n  id\n  title\n  body\n  subject\n  Active\n  createdAt\n}\n    `;\nexport const AlluserSnippetFragmentDoc = gql`\n    fragment alluserSnippet on Alluser {\n  user {\n    id\n    name\n  }\n}\n    `;\nexport const UpdateTemplatesDocument = gql`\n    mutation UpdateTemplates($id: Int!, $title: String!, $body: String!, $subject: String!, $Active: Boolean!) {\n  updateTemplates(\n    id: $id\n    title: $title\n    body: $body\n    subject: $subject\n    Active: $Active\n  ) {\n    ...RegularTemplateResponse\n  }\n}\n    ${RegularTemplateResponseFragmentDoc}`;\nexport type UpdateTemplatesMutationFn = Apollo.MutationFunction<UpdateTemplatesMutation, UpdateTemplatesMutationVariables>;\n\n/**\n * __useUpdateTemplatesMutation__\n *\n * To run a mutation, you first call `useUpdateTemplatesMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateTemplatesMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateTemplatesMutation, { data, loading, error }] = useUpdateTemplatesMutation({\n *   variables: {\n *      id: // value for 'id'\n *      title: // value for 'title'\n *      body: // value for 'body'\n *      subject: // value for 'subject'\n *      Active: // value for 'Active'\n *   },\n * });\n */\nexport function useUpdateTemplatesMutation(baseOptions?: Apollo.MutationHookOptions<UpdateTemplatesMutation, UpdateTemplatesMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateTemplatesMutation, UpdateTemplatesMutationVariables>(UpdateTemplatesDocument, options);\n      }\nexport type UpdateTemplatesMutationHookResult = ReturnType<typeof useUpdateTemplatesMutation>;\nexport type UpdateTemplatesMutationResult = Apollo.MutationResult<UpdateTemplatesMutation>;\nexport type UpdateTemplatesMutationOptions = Apollo.BaseMutationOptions<UpdateTemplatesMutation, UpdateTemplatesMutationVariables>;\nexport const AcceptInviteDocument = gql`\n    mutation AcceptInvite($token: String!, $subscribed: Boolean!, $frequency: Float!) {\n  acceptInvite(token: $token, subscribed: $subscribed, frequency: $frequency) {\n    ...RegularSubResponse\n  }\n}\n    ${RegularSubResponseFragmentDoc}`;\nexport type AcceptInviteMutationFn = Apollo.MutationFunction<AcceptInviteMutation, AcceptInviteMutationVariables>;\n\n/**\n * __useAcceptInviteMutation__\n *\n * To run a mutation, you first call `useAcceptInviteMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAcceptInviteMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [acceptInviteMutation, { data, loading, error }] = useAcceptInviteMutation({\n *   variables: {\n *      token: // value for 'token'\n *      subscribed: // value for 'subscribed'\n *      frequency: // value for 'frequency'\n *   },\n * });\n */\nexport function useAcceptInviteMutation(baseOptions?: Apollo.MutationHookOptions<AcceptInviteMutation, AcceptInviteMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AcceptInviteMutation, AcceptInviteMutationVariables>(AcceptInviteDocument, options);\n      }\nexport type AcceptInviteMutationHookResult = ReturnType<typeof useAcceptInviteMutation>;\nexport type AcceptInviteMutationResult = Apollo.MutationResult<AcceptInviteMutation>;\nexport type AcceptInviteMutationOptions = Apollo.BaseMutationOptions<AcceptInviteMutation, AcceptInviteMutationVariables>;\nexport const CancelSubscriptionDocument = gql`\n    mutation CancelSubscription {\n  cancelSubscription {\n    ...ProfileUserResponse\n  }\n}\n    ${ProfileUserResponseFragmentDoc}`;\nexport type CancelSubscriptionMutationFn = Apollo.MutationFunction<CancelSubscriptionMutation, CancelSubscriptionMutationVariables>;\n\n/**\n * __useCancelSubscriptionMutation__\n *\n * To run a mutation, you first call `useCancelSubscriptionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCancelSubscriptionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [cancelSubscriptionMutation, { data, loading, error }] = useCancelSubscriptionMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useCancelSubscriptionMutation(baseOptions?: Apollo.MutationHookOptions<CancelSubscriptionMutation, CancelSubscriptionMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CancelSubscriptionMutation, CancelSubscriptionMutationVariables>(CancelSubscriptionDocument, options);\n      }\nexport type CancelSubscriptionMutationHookResult = ReturnType<typeof useCancelSubscriptionMutation>;\nexport type CancelSubscriptionMutationResult = Apollo.MutationResult<CancelSubscriptionMutation>;\nexport type CancelSubscriptionMutationOptions = Apollo.BaseMutationOptions<CancelSubscriptionMutation, CancelSubscriptionMutationVariables>;\nexport const ChangeCreditCardDocument = gql`\n    mutation ChangeCreditCard($source: String!, $ccLast4: String!) {\n  changeCreditCard(source: $source, ccLast4: $ccLast4) {\n    ...ProfileUserResponse\n  }\n}\n    ${ProfileUserResponseFragmentDoc}`;\nexport type ChangeCreditCardMutationFn = Apollo.MutationFunction<ChangeCreditCardMutation, ChangeCreditCardMutationVariables>;\n\n/**\n * __useChangeCreditCardMutation__\n *\n * To run a mutation, you first call `useChangeCreditCardMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useChangeCreditCardMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [changeCreditCardMutation, { data, loading, error }] = useChangeCreditCardMutation({\n *   variables: {\n *      source: // value for 'source'\n *      ccLast4: // value for 'ccLast4'\n *   },\n * });\n */\nexport function useChangeCreditCardMutation(baseOptions?: Apollo.MutationHookOptions<ChangeCreditCardMutation, ChangeCreditCardMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<ChangeCreditCardMutation, ChangeCreditCardMutationVariables>(ChangeCreditCardDocument, options);\n      }\nexport type ChangeCreditCardMutationHookResult = ReturnType<typeof useChangeCreditCardMutation>;\nexport type ChangeCreditCardMutationResult = Apollo.MutationResult<ChangeCreditCardMutation>;\nexport type ChangeCreditCardMutationOptions = Apollo.BaseMutationOptions<ChangeCreditCardMutation, ChangeCreditCardMutationVariables>;\nexport const ChangePasswordDocument = gql`\n    mutation ChangePassword($token: String!, $newPassword: String!) {\n  changePassword(token: $token, newPassword: $newPassword) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport type ChangePasswordMutationFn = Apollo.MutationFunction<ChangePasswordMutation, ChangePasswordMutationVariables>;\n\n/**\n * __useChangePasswordMutation__\n *\n * To run a mutation, you first call `useChangePasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useChangePasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [changePasswordMutation, { data, loading, error }] = useChangePasswordMutation({\n *   variables: {\n *      token: // value for 'token'\n *      newPassword: // value for 'newPassword'\n *   },\n * });\n */\nexport function useChangePasswordMutation(baseOptions?: Apollo.MutationHookOptions<ChangePasswordMutation, ChangePasswordMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<ChangePasswordMutation, ChangePasswordMutationVariables>(ChangePasswordDocument, options);\n      }\nexport type ChangePasswordMutationHookResult = ReturnType<typeof useChangePasswordMutation>;\nexport type ChangePasswordMutationResult = Apollo.MutationResult<ChangePasswordMutation>;\nexport type ChangePasswordMutationOptions = Apollo.BaseMutationOptions<ChangePasswordMutation, ChangePasswordMutationVariables>;\nexport const UpdateMailandFrequencyDocument = gql`\n    mutation updateMailandFrequency($token: String!, $frequency: Float!, $email: String!) {\n  updateMailandFrequency(token: $token, frequency: $frequency, email: $email) {\n    ...RegularSubResponse\n  }\n}\n    ${RegularSubResponseFragmentDoc}`;\nexport type UpdateMailandFrequencyMutationFn = Apollo.MutationFunction<UpdateMailandFrequencyMutation, UpdateMailandFrequencyMutationVariables>;\n\n/**\n * __useUpdateMailandFrequencyMutation__\n *\n * To run a mutation, you first call `useUpdateMailandFrequencyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateMailandFrequencyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateMailandFrequencyMutation, { data, loading, error }] = useUpdateMailandFrequencyMutation({\n *   variables: {\n *      token: // value for 'token'\n *      frequency: // value for 'frequency'\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useUpdateMailandFrequencyMutation(baseOptions?: Apollo.MutationHookOptions<UpdateMailandFrequencyMutation, UpdateMailandFrequencyMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateMailandFrequencyMutation, UpdateMailandFrequencyMutationVariables>(UpdateMailandFrequencyDocument, options);\n      }\nexport type UpdateMailandFrequencyMutationHookResult = ReturnType<typeof useUpdateMailandFrequencyMutation>;\nexport type UpdateMailandFrequencyMutationResult = Apollo.MutationResult<UpdateMailandFrequencyMutation>;\nexport type UpdateMailandFrequencyMutationOptions = Apollo.BaseMutationOptions<UpdateMailandFrequencyMutation, UpdateMailandFrequencyMutationVariables>;\nexport const CreateQuoteDocument = gql`\n    mutation CreateQuote($input: QuoteInput!) {\n  createQuote(input: $input) {\n    ...RegularQuoteResponse\n  }\n}\n    ${RegularQuoteResponseFragmentDoc}`;\nexport type CreateQuoteMutationFn = Apollo.MutationFunction<CreateQuoteMutation, CreateQuoteMutationVariables>;\n\n/**\n * __useCreateQuoteMutation__\n *\n * To run a mutation, you first call `useCreateQuoteMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateQuoteMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createQuoteMutation, { data, loading, error }] = useCreateQuoteMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreateQuoteMutation(baseOptions?: Apollo.MutationHookOptions<CreateQuoteMutation, CreateQuoteMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateQuoteMutation, CreateQuoteMutationVariables>(CreateQuoteDocument, options);\n      }\nexport type CreateQuoteMutationHookResult = ReturnType<typeof useCreateQuoteMutation>;\nexport type CreateQuoteMutationResult = Apollo.MutationResult<CreateQuoteMutation>;\nexport type CreateQuoteMutationOptions = Apollo.BaseMutationOptions<CreateQuoteMutation, CreateQuoteMutationVariables>;\nexport const CreateSubDocument = gql`\n    mutation CreateSub($input: SubInput!) {\n  createSub(input: $input) {\n    ...RegularSubResponse\n  }\n}\n    ${RegularSubResponseFragmentDoc}`;\nexport type CreateSubMutationFn = Apollo.MutationFunction<CreateSubMutation, CreateSubMutationVariables>;\n\n/**\n * __useCreateSubMutation__\n *\n * To run a mutation, you first call `useCreateSubMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateSubMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createSubMutation, { data, loading, error }] = useCreateSubMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreateSubMutation(baseOptions?: Apollo.MutationHookOptions<CreateSubMutation, CreateSubMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateSubMutation, CreateSubMutationVariables>(CreateSubDocument, options);\n      }\nexport type CreateSubMutationHookResult = ReturnType<typeof useCreateSubMutation>;\nexport type CreateSubMutationResult = Apollo.MutationResult<CreateSubMutation>;\nexport type CreateSubMutationOptions = Apollo.BaseMutationOptions<CreateSubMutation, CreateSubMutationVariables>;\nexport const CreateSubFromContactDocument = gql`\n    mutation CreateSubFromContact($token: String!, $emails: String!) {\n  createSubFromContact(token: $token, emails: $emails) {\n    ...RegularSubResponse\n  }\n}\n    ${RegularSubResponseFragmentDoc}`;\nexport type CreateSubFromContactMutationFn = Apollo.MutationFunction<CreateSubFromContactMutation, CreateSubFromContactMutationVariables>;\n\n/**\n * __useCreateSubFromContactMutation__\n *\n * To run a mutation, you first call `useCreateSubFromContactMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateSubFromContactMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createSubFromContactMutation, { data, loading, error }] = useCreateSubFromContactMutation({\n *   variables: {\n *      token: // value for 'token'\n *      emails: // value for 'emails'\n *   },\n * });\n */\nexport function useCreateSubFromContactMutation(baseOptions?: Apollo.MutationHookOptions<CreateSubFromContactMutation, CreateSubFromContactMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateSubFromContactMutation, CreateSubFromContactMutationVariables>(CreateSubFromContactDocument, options);\n      }\nexport type CreateSubFromContactMutationHookResult = ReturnType<typeof useCreateSubFromContactMutation>;\nexport type CreateSubFromContactMutationResult = Apollo.MutationResult<CreateSubFromContactMutation>;\nexport type CreateSubFromContactMutationOptions = Apollo.BaseMutationOptions<CreateSubFromContactMutation, CreateSubFromContactMutationVariables>;\nexport const CreateSubFromInviteDocument = gql`\n    mutation CreateSubFromInvite($input: SubInviteInput!) {\n  createSubFromInvite(input: $input) {\n    ...RegularSubResponse\n  }\n}\n    ${RegularSubResponseFragmentDoc}`;\nexport type CreateSubFromInviteMutationFn = Apollo.MutationFunction<CreateSubFromInviteMutation, CreateSubFromInviteMutationVariables>;\n\n/**\n * __useCreateSubFromInviteMutation__\n *\n * To run a mutation, you first call `useCreateSubFromInviteMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateSubFromInviteMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createSubFromInviteMutation, { data, loading, error }] = useCreateSubFromInviteMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreateSubFromInviteMutation(baseOptions?: Apollo.MutationHookOptions<CreateSubFromInviteMutation, CreateSubFromInviteMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateSubFromInviteMutation, CreateSubFromInviteMutationVariables>(CreateSubFromInviteDocument, options);\n      }\nexport type CreateSubFromInviteMutationHookResult = ReturnType<typeof useCreateSubFromInviteMutation>;\nexport type CreateSubFromInviteMutationResult = Apollo.MutationResult<CreateSubFromInviteMutation>;\nexport type CreateSubFromInviteMutationOptions = Apollo.BaseMutationOptions<CreateSubFromInviteMutation, CreateSubFromInviteMutationVariables>;\nexport const CreateSubscriptionDocument = gql`\n    mutation CreateSubscription($source: String!, $ccLast4: String!) {\n  createSubscription(source: $source, ccLast4: $ccLast4) {\n    ...ProfileUserResponse\n  }\n}\n    ${ProfileUserResponseFragmentDoc}`;\nexport type CreateSubscriptionMutationFn = Apollo.MutationFunction<CreateSubscriptionMutation, CreateSubscriptionMutationVariables>;\n\n/**\n * __useCreateSubscriptionMutation__\n *\n * To run a mutation, you first call `useCreateSubscriptionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateSubscriptionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createSubscriptionMutation, { data, loading, error }] = useCreateSubscriptionMutation({\n *   variables: {\n *      source: // value for 'source'\n *      ccLast4: // value for 'ccLast4'\n *   },\n * });\n */\nexport function useCreateSubscriptionMutation(baseOptions?: Apollo.MutationHookOptions<CreateSubscriptionMutation, CreateSubscriptionMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateSubscriptionMutation, CreateSubscriptionMutationVariables>(CreateSubscriptionDocument, options);\n      }\nexport type CreateSubscriptionMutationHookResult = ReturnType<typeof useCreateSubscriptionMutation>;\nexport type CreateSubscriptionMutationResult = Apollo.MutationResult<CreateSubscriptionMutation>;\nexport type CreateSubscriptionMutationOptions = Apollo.BaseMutationOptions<CreateSubscriptionMutation, CreateSubscriptionMutationVariables>;\nexport const CreateSubsfrwdpageDocument = gql`\n    mutation CreateSubsfrwdpage($token: String!, $name: String!, $frequency: Float!, $email: String!) {\n  createSubsfrwdpage(\n    token: $token\n    name: $name\n    frequency: $frequency\n    email: $email\n  ) {\n    ...RegularSubResponse\n  }\n}\n    ${RegularSubResponseFragmentDoc}`;\nexport type CreateSubsfrwdpageMutationFn = Apollo.MutationFunction<CreateSubsfrwdpageMutation, CreateSubsfrwdpageMutationVariables>;\n\n/**\n * __useCreateSubsfrwdpageMutation__\n *\n * To run a mutation, you first call `useCreateSubsfrwdpageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateSubsfrwdpageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createSubsfrwdpageMutation, { data, loading, error }] = useCreateSubsfrwdpageMutation({\n *   variables: {\n *      token: // value for 'token'\n *      name: // value for 'name'\n *      frequency: // value for 'frequency'\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useCreateSubsfrwdpageMutation(baseOptions?: Apollo.MutationHookOptions<CreateSubsfrwdpageMutation, CreateSubsfrwdpageMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateSubsfrwdpageMutation, CreateSubsfrwdpageMutationVariables>(CreateSubsfrwdpageDocument, options);\n      }\nexport type CreateSubsfrwdpageMutationHookResult = ReturnType<typeof useCreateSubsfrwdpageMutation>;\nexport type CreateSubsfrwdpageMutationResult = Apollo.MutationResult<CreateSubsfrwdpageMutation>;\nexport type CreateSubsfrwdpageMutationOptions = Apollo.BaseMutationOptions<CreateSubsfrwdpageMutation, CreateSubsfrwdpageMutationVariables>;\nexport const DeleteQuoteDocument = gql`\n    mutation DeleteQuote($id: Int!) {\n  deleteQuote(id: $id)\n}\n    `;\nexport type DeleteQuoteMutationFn = Apollo.MutationFunction<DeleteQuoteMutation, DeleteQuoteMutationVariables>;\n\n/**\n * __useDeleteQuoteMutation__\n *\n * To run a mutation, you first call `useDeleteQuoteMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteQuoteMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteQuoteMutation, { data, loading, error }] = useDeleteQuoteMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteQuoteMutation(baseOptions?: Apollo.MutationHookOptions<DeleteQuoteMutation, DeleteQuoteMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<DeleteQuoteMutation, DeleteQuoteMutationVariables>(DeleteQuoteDocument, options);\n      }\nexport type DeleteQuoteMutationHookResult = ReturnType<typeof useDeleteQuoteMutation>;\nexport type DeleteQuoteMutationResult = Apollo.MutationResult<DeleteQuoteMutation>;\nexport type DeleteQuoteMutationOptions = Apollo.BaseMutationOptions<DeleteQuoteMutation, DeleteQuoteMutationVariables>;\nexport const DeleteSubDocument = gql`\n    mutation DeleteSub($id: Int!) {\n  deleteSub(id: $id)\n}\n    `;\nexport type DeleteSubMutationFn = Apollo.MutationFunction<DeleteSubMutation, DeleteSubMutationVariables>;\n\n/**\n * __useDeleteSubMutation__\n *\n * To run a mutation, you first call `useDeleteSubMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteSubMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteSubMutation, { data, loading, error }] = useDeleteSubMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteSubMutation(baseOptions?: Apollo.MutationHookOptions<DeleteSubMutation, DeleteSubMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<DeleteSubMutation, DeleteSubMutationVariables>(DeleteSubDocument, options);\n      }\nexport type DeleteSubMutationHookResult = ReturnType<typeof useDeleteSubMutation>;\nexport type DeleteSubMutationResult = Apollo.MutationResult<DeleteSubMutation>;\nexport type DeleteSubMutationOptions = Apollo.BaseMutationOptions<DeleteSubMutation, DeleteSubMutationVariables>;\nexport const DeleteTemplateDocument = gql`\n    mutation DeleteTemplate($id: Int!) {\n  deleteTemplate(id: $id)\n}\n    `;\nexport type DeleteTemplateMutationFn = Apollo.MutationFunction<DeleteTemplateMutation, DeleteTemplateMutationVariables>;\n\n/**\n * __useDeleteTemplateMutation__\n *\n * To run a mutation, you first call `useDeleteTemplateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTemplateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTemplateMutation, { data, loading, error }] = useDeleteTemplateMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteTemplateMutation(baseOptions?: Apollo.MutationHookOptions<DeleteTemplateMutation, DeleteTemplateMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<DeleteTemplateMutation, DeleteTemplateMutationVariables>(DeleteTemplateDocument, options);\n      }\nexport type DeleteTemplateMutationHookResult = ReturnType<typeof useDeleteTemplateMutation>;\nexport type DeleteTemplateMutationResult = Apollo.MutationResult<DeleteTemplateMutation>;\nexport type DeleteTemplateMutationOptions = Apollo.BaseMutationOptions<DeleteTemplateMutation, DeleteTemplateMutationVariables>;\nexport const ForgotPasswordDocument = gql`\n    mutation ForgotPassword($email: String!) {\n  forgotPassword(email: $email)\n}\n    `;\nexport type ForgotPasswordMutationFn = Apollo.MutationFunction<ForgotPasswordMutation, ForgotPasswordMutationVariables>;\n\n/**\n * __useForgotPasswordMutation__\n *\n * To run a mutation, you first call `useForgotPasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useForgotPasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [forgotPasswordMutation, { data, loading, error }] = useForgotPasswordMutation({\n *   variables: {\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useForgotPasswordMutation(baseOptions?: Apollo.MutationHookOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<ForgotPasswordMutation, ForgotPasswordMutationVariables>(ForgotPasswordDocument, options);\n      }\nexport type ForgotPasswordMutationHookResult = ReturnType<typeof useForgotPasswordMutation>;\nexport type ForgotPasswordMutationResult = Apollo.MutationResult<ForgotPasswordMutation>;\nexport type ForgotPasswordMutationOptions = Apollo.BaseMutationOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>;\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = Apollo.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: Apollo.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, options);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = Apollo.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = Apollo.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const ReSubribeUserExistingCcDocument = gql`\n    mutation ReSubribeUserExistingCC {\n  reSubribeUserExistingCC {\n    ...ProfileUserResponse\n  }\n}\n    ${ProfileUserResponseFragmentDoc}`;\nexport type ReSubribeUserExistingCcMutationFn = Apollo.MutationFunction<ReSubribeUserExistingCcMutation, ReSubribeUserExistingCcMutationVariables>;\n\n/**\n * __useReSubribeUserExistingCcMutation__\n *\n * To run a mutation, you first call `useReSubribeUserExistingCcMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useReSubribeUserExistingCcMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [reSubribeUserExistingCcMutation, { data, loading, error }] = useReSubribeUserExistingCcMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useReSubribeUserExistingCcMutation(baseOptions?: Apollo.MutationHookOptions<ReSubribeUserExistingCcMutation, ReSubribeUserExistingCcMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<ReSubribeUserExistingCcMutation, ReSubribeUserExistingCcMutationVariables>(ReSubribeUserExistingCcDocument, options);\n      }\nexport type ReSubribeUserExistingCcMutationHookResult = ReturnType<typeof useReSubribeUserExistingCcMutation>;\nexport type ReSubribeUserExistingCcMutationResult = Apollo.MutationResult<ReSubribeUserExistingCcMutation>;\nexport type ReSubribeUserExistingCcMutationOptions = Apollo.BaseMutationOptions<ReSubribeUserExistingCcMutation, ReSubribeUserExistingCcMutationVariables>;\nexport const ReSubribeUserNewCcDocument = gql`\n    mutation ReSubribeUserNewCC($source: String!, $ccLast4: String!) {\n  reSubribeUserNewCC(source: $source, ccLast4: $ccLast4) {\n    ...ProfileUserResponse\n  }\n}\n    ${ProfileUserResponseFragmentDoc}`;\nexport type ReSubribeUserNewCcMutationFn = Apollo.MutationFunction<ReSubribeUserNewCcMutation, ReSubribeUserNewCcMutationVariables>;\n\n/**\n * __useReSubribeUserNewCcMutation__\n *\n * To run a mutation, you first call `useReSubribeUserNewCcMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useReSubribeUserNewCcMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [reSubribeUserNewCcMutation, { data, loading, error }] = useReSubribeUserNewCcMutation({\n *   variables: {\n *      source: // value for 'source'\n *      ccLast4: // value for 'ccLast4'\n *   },\n * });\n */\nexport function useReSubribeUserNewCcMutation(baseOptions?: Apollo.MutationHookOptions<ReSubribeUserNewCcMutation, ReSubribeUserNewCcMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<ReSubribeUserNewCcMutation, ReSubribeUserNewCcMutationVariables>(ReSubribeUserNewCcDocument, options);\n      }\nexport type ReSubribeUserNewCcMutationHookResult = ReturnType<typeof useReSubribeUserNewCcMutation>;\nexport type ReSubribeUserNewCcMutationResult = Apollo.MutationResult<ReSubribeUserNewCcMutation>;\nexport type ReSubribeUserNewCcMutationOptions = Apollo.BaseMutationOptions<ReSubribeUserNewCcMutation, ReSubribeUserNewCcMutationVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($options: UsernamePasswordInput!) {\n  register(options: $options) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport type RegisterMutationFn = Apollo.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: Apollo.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, options);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = Apollo.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = Apollo.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const CreateTemplatesDocument = gql`\n    mutation createTemplates($input: templateInput!) {\n  createTemplates(input: $input) {\n    ...RegularTemplateResponse\n  }\n}\n    ${RegularTemplateResponseFragmentDoc}`;\nexport type CreateTemplatesMutationFn = Apollo.MutationFunction<CreateTemplatesMutation, CreateTemplatesMutationVariables>;\n\n/**\n * __useCreateTemplatesMutation__\n *\n * To run a mutation, you first call `useCreateTemplatesMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTemplatesMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTemplatesMutation, { data, loading, error }] = useCreateTemplatesMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreateTemplatesMutation(baseOptions?: Apollo.MutationHookOptions<CreateTemplatesMutation, CreateTemplatesMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateTemplatesMutation, CreateTemplatesMutationVariables>(CreateTemplatesDocument, options);\n      }\nexport type CreateTemplatesMutationHookResult = ReturnType<typeof useCreateTemplatesMutation>;\nexport type CreateTemplatesMutationResult = Apollo.MutationResult<CreateTemplatesMutation>;\nexport type CreateTemplatesMutationOptions = Apollo.BaseMutationOptions<CreateTemplatesMutation, CreateTemplatesMutationVariables>;\nexport const UnsubscribeSubDocument = gql`\n    mutation UnsubscribeSub($token: String!) {\n  unsubscribeSub(token: $token) {\n    ...RegularSubResponse\n  }\n}\n    ${RegularSubResponseFragmentDoc}`;\nexport type UnsubscribeSubMutationFn = Apollo.MutationFunction<UnsubscribeSubMutation, UnsubscribeSubMutationVariables>;\n\n/**\n * __useUnsubscribeSubMutation__\n *\n * To run a mutation, you first call `useUnsubscribeSubMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUnsubscribeSubMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [unsubscribeSubMutation, { data, loading, error }] = useUnsubscribeSubMutation({\n *   variables: {\n *      token: // value for 'token'\n *   },\n * });\n */\nexport function useUnsubscribeSubMutation(baseOptions?: Apollo.MutationHookOptions<UnsubscribeSubMutation, UnsubscribeSubMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UnsubscribeSubMutation, UnsubscribeSubMutationVariables>(UnsubscribeSubDocument, options);\n      }\nexport type UnsubscribeSubMutationHookResult = ReturnType<typeof useUnsubscribeSubMutation>;\nexport type UnsubscribeSubMutationResult = Apollo.MutationResult<UnsubscribeSubMutation>;\nexport type UnsubscribeSubMutationOptions = Apollo.BaseMutationOptions<UnsubscribeSubMutation, UnsubscribeSubMutationVariables>;\nexport const UpdateQuoteDocument = gql`\n    mutation UpdateQuote($id: Int!, $name: String!, $catagory: String!) {\n  updateQuote(id: $id, name: $name, catagory: $catagory) {\n    ...RegularQuoteResponse\n  }\n}\n    ${RegularQuoteResponseFragmentDoc}`;\nexport type UpdateQuoteMutationFn = Apollo.MutationFunction<UpdateQuoteMutation, UpdateQuoteMutationVariables>;\n\n/**\n * __useUpdateQuoteMutation__\n *\n * To run a mutation, you first call `useUpdateQuoteMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateQuoteMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateQuoteMutation, { data, loading, error }] = useUpdateQuoteMutation({\n *   variables: {\n *      id: // value for 'id'\n *      name: // value for 'name'\n *      catagory: // value for 'catagory'\n *   },\n * });\n */\nexport function useUpdateQuoteMutation(baseOptions?: Apollo.MutationHookOptions<UpdateQuoteMutation, UpdateQuoteMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateQuoteMutation, UpdateQuoteMutationVariables>(UpdateQuoteDocument, options);\n      }\nexport type UpdateQuoteMutationHookResult = ReturnType<typeof useUpdateQuoteMutation>;\nexport type UpdateQuoteMutationResult = Apollo.MutationResult<UpdateQuoteMutation>;\nexport type UpdateQuoteMutationOptions = Apollo.BaseMutationOptions<UpdateQuoteMutation, UpdateQuoteMutationVariables>;\nexport const UpdateSubDocument = gql`\n    mutation UpdateSub($id: Int!, $name: String!, $email: String!, $subscribed: Boolean!) {\n  updateSub(id: $id, name: $name, email: $email, subscribed: $subscribed) {\n    ...RegularSubResponse\n  }\n}\n    ${RegularSubResponseFragmentDoc}`;\nexport type UpdateSubMutationFn = Apollo.MutationFunction<UpdateSubMutation, UpdateSubMutationVariables>;\n\n/**\n * __useUpdateSubMutation__\n *\n * To run a mutation, you first call `useUpdateSubMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateSubMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateSubMutation, { data, loading, error }] = useUpdateSubMutation({\n *   variables: {\n *      id: // value for 'id'\n *      name: // value for 'name'\n *      email: // value for 'email'\n *      subscribed: // value for 'subscribed'\n *   },\n * });\n */\nexport function useUpdateSubMutation(baseOptions?: Apollo.MutationHookOptions<UpdateSubMutation, UpdateSubMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateSubMutation, UpdateSubMutationVariables>(UpdateSubDocument, options);\n      }\nexport type UpdateSubMutationHookResult = ReturnType<typeof useUpdateSubMutation>;\nexport type UpdateSubMutationResult = Apollo.MutationResult<UpdateSubMutation>;\nexport type UpdateSubMutationOptions = Apollo.BaseMutationOptions<UpdateSubMutation, UpdateSubMutationVariables>;\nexport const UpdateUserDocument = gql`\n    mutation UpdateUser($input: UserInput!) {\n  updateUser(input: $input) {\n    ...ProfileUserResponse\n  }\n}\n    ${ProfileUserResponseFragmentDoc}`;\nexport type UpdateUserMutationFn = Apollo.MutationFunction<UpdateUserMutation, UpdateUserMutationVariables>;\n\n/**\n * __useUpdateUserMutation__\n *\n * To run a mutation, you first call `useUpdateUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateUserMutation, { data, loading, error }] = useUpdateUserMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpdateUserMutation(baseOptions?: Apollo.MutationHookOptions<UpdateUserMutation, UpdateUserMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateUserMutation, UpdateUserMutationVariables>(UpdateUserDocument, options);\n      }\nexport type UpdateUserMutationHookResult = ReturnType<typeof useUpdateUserMutation>;\nexport type UpdateUserMutationResult = Apollo.MutationResult<UpdateUserMutation>;\nexport type UpdateUserMutationOptions = Apollo.BaseMutationOptions<UpdateUserMutation, UpdateUserMutationVariables>;\nexport const UpdateUserAuthDocument = gql`\n    mutation UpdateUserAuth($input: UserAuthInput!) {\n  updateAuth(input: $input) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport type UpdateUserAuthMutationFn = Apollo.MutationFunction<UpdateUserAuthMutation, UpdateUserAuthMutationVariables>;\n\n/**\n * __useUpdateUserAuthMutation__\n *\n * To run a mutation, you first call `useUpdateUserAuthMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateUserAuthMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateUserAuthMutation, { data, loading, error }] = useUpdateUserAuthMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpdateUserAuthMutation(baseOptions?: Apollo.MutationHookOptions<UpdateUserAuthMutation, UpdateUserAuthMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateUserAuthMutation, UpdateUserAuthMutationVariables>(UpdateUserAuthDocument, options);\n      }\nexport type UpdateUserAuthMutationHookResult = ReturnType<typeof useUpdateUserAuthMutation>;\nexport type UpdateUserAuthMutationResult = Apollo.MutationResult<UpdateUserAuthMutation>;\nexport type UpdateUserAuthMutationOptions = Apollo.BaseMutationOptions<UpdateUserAuthMutation, UpdateUserAuthMutationVariables>;\nexport const AllsubsDocument = gql`\n    query Allsubs {\n  Allsubs {\n    ...AllsubSnippet\n  }\n}\n    ${AllsubSnippetFragmentDoc}`;\n\n/**\n * __useAllsubsQuery__\n *\n * To run a query within a React component, call `useAllsubsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllsubsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllsubsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllsubsQuery(baseOptions?: Apollo.QueryHookOptions<AllsubsQuery, AllsubsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AllsubsQuery, AllsubsQueryVariables>(AllsubsDocument, options);\n      }\nexport function useAllsubsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AllsubsQuery, AllsubsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AllsubsQuery, AllsubsQueryVariables>(AllsubsDocument, options);\n        }\nexport type AllsubsQueryHookResult = ReturnType<typeof useAllsubsQuery>;\nexport type AllsubsLazyQueryHookResult = ReturnType<typeof useAllsubsLazyQuery>;\nexport type AllsubsQueryResult = Apollo.QueryResult<AllsubsQuery, AllsubsQueryVariables>;\nexport const AllsubsIdDocument = gql`\n    query AllsubsId($Id: Int!) {\n  AllsubsId(Id: $Id) {\n    ...AllsubSnippet\n  }\n}\n    ${AllsubSnippetFragmentDoc}`;\n\n/**\n * __useAllsubsIdQuery__\n *\n * To run a query within a React component, call `useAllsubsIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllsubsIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllsubsIdQuery({\n *   variables: {\n *      Id: // value for 'Id'\n *   },\n * });\n */\nexport function useAllsubsIdQuery(baseOptions: Apollo.QueryHookOptions<AllsubsIdQuery, AllsubsIdQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AllsubsIdQuery, AllsubsIdQueryVariables>(AllsubsIdDocument, options);\n      }\nexport function useAllsubsIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AllsubsIdQuery, AllsubsIdQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AllsubsIdQuery, AllsubsIdQueryVariables>(AllsubsIdDocument, options);\n        }\nexport type AllsubsIdQueryHookResult = ReturnType<typeof useAllsubsIdQuery>;\nexport type AllsubsIdLazyQueryHookResult = ReturnType<typeof useAllsubsIdLazyQuery>;\nexport type AllsubsIdQueryResult = Apollo.QueryResult<AllsubsIdQuery, AllsubsIdQueryVariables>;\nexport const MailActivityByIdDocument = gql`\n    query mailActivityById($id: Int!) {\n  mailActivityById(id: $id) {\n    ...ActivitySnippet\n  }\n}\n    ${ActivitySnippetFragmentDoc}`;\n\n/**\n * __useMailActivityByIdQuery__\n *\n * To run a query within a React component, call `useMailActivityByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useMailActivityByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMailActivityByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useMailActivityByIdQuery(baseOptions: Apollo.QueryHookOptions<MailActivityByIdQuery, MailActivityByIdQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MailActivityByIdQuery, MailActivityByIdQueryVariables>(MailActivityByIdDocument, options);\n      }\nexport function useMailActivityByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MailActivityByIdQuery, MailActivityByIdQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MailActivityByIdQuery, MailActivityByIdQueryVariables>(MailActivityByIdDocument, options);\n        }\nexport type MailActivityByIdQueryHookResult = ReturnType<typeof useMailActivityByIdQuery>;\nexport type MailActivityByIdLazyQueryHookResult = ReturnType<typeof useMailActivityByIdLazyQuery>;\nexport type MailActivityByIdQueryResult = Apollo.QueryResult<MailActivityByIdQuery, MailActivityByIdQueryVariables>;\nexport const PaginatedActivityDocument = gql`\n    query paginatedActivity($limit: Int!, $cursor: String) {\n  PaginatedmailActivity(limit: $limit, cursor: $cursor) {\n    hasMore\n    PaginatedmailActivity {\n      ...PaginatedActivitySnippet\n    }\n  }\n}\n    ${PaginatedActivitySnippetFragmentDoc}`;\n\n/**\n * __usePaginatedActivityQuery__\n *\n * To run a query within a React component, call `usePaginatedActivityQuery` and pass it any options that fit your needs.\n * When your component renders, `usePaginatedActivityQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePaginatedActivityQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\nexport function usePaginatedActivityQuery(baseOptions: Apollo.QueryHookOptions<PaginatedActivityQuery, PaginatedActivityQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<PaginatedActivityQuery, PaginatedActivityQueryVariables>(PaginatedActivityDocument, options);\n      }\nexport function usePaginatedActivityLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PaginatedActivityQuery, PaginatedActivityQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<PaginatedActivityQuery, PaginatedActivityQueryVariables>(PaginatedActivityDocument, options);\n        }\nexport type PaginatedActivityQueryHookResult = ReturnType<typeof usePaginatedActivityQuery>;\nexport type PaginatedActivityLazyQueryHookResult = ReturnType<typeof usePaginatedActivityLazyQuery>;\nexport type PaginatedActivityQueryResult = Apollo.QueryResult<PaginatedActivityQuery, PaginatedActivityQueryVariables>;\nexport const MailActivitybyIdDocument = gql`\n    query mailActivitybyId($limit: Int!, $cursor: String, $id: Int!) {\n  PaginatedmailActivitybyId(limit: $limit, cursor: $cursor, id: $id) {\n    hasMore\n    PaginatedmailActivity {\n      ...PaginatedActivitySnippet\n    }\n  }\n}\n    ${PaginatedActivitySnippetFragmentDoc}`;\n\n/**\n * __useMailActivitybyIdQuery__\n *\n * To run a query within a React component, call `useMailActivitybyIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useMailActivitybyIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMailActivitybyIdQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      cursor: // value for 'cursor'\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useMailActivitybyIdQuery(baseOptions: Apollo.QueryHookOptions<MailActivitybyIdQuery, MailActivitybyIdQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MailActivitybyIdQuery, MailActivitybyIdQueryVariables>(MailActivitybyIdDocument, options);\n      }\nexport function useMailActivitybyIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MailActivitybyIdQuery, MailActivitybyIdQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MailActivitybyIdQuery, MailActivitybyIdQueryVariables>(MailActivitybyIdDocument, options);\n        }\nexport type MailActivitybyIdQueryHookResult = ReturnType<typeof useMailActivitybyIdQuery>;\nexport type MailActivitybyIdLazyQueryHookResult = ReturnType<typeof useMailActivitybyIdLazyQuery>;\nexport type MailActivitybyIdQueryResult = Apollo.QueryResult<MailActivitybyIdQuery, MailActivitybyIdQueryVariables>;\nexport const QuotesDocument = gql`\n    query Quotes($limit: Int!, $cursor: String) {\n  quotes(limit: $limit, cursor: $cursor) {\n    hasMore\n    quotes {\n      ...QuoteSnippet\n    }\n  }\n}\n    ${QuoteSnippetFragmentDoc}`;\n\n/**\n * __useQuotesQuery__\n *\n * To run a query within a React component, call `useQuotesQuery` and pass it any options that fit your needs.\n * When your component renders, `useQuotesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useQuotesQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\nexport function useQuotesQuery(baseOptions: Apollo.QueryHookOptions<QuotesQuery, QuotesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<QuotesQuery, QuotesQueryVariables>(QuotesDocument, options);\n      }\nexport function useQuotesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<QuotesQuery, QuotesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<QuotesQuery, QuotesQueryVariables>(QuotesDocument, options);\n        }\nexport type QuotesQueryHookResult = ReturnType<typeof useQuotesQuery>;\nexport type QuotesLazyQueryHookResult = ReturnType<typeof useQuotesLazyQuery>;\nexport type QuotesQueryResult = Apollo.QueryResult<QuotesQuery, QuotesQueryVariables>;\nexport const SubsDocument = gql`\n    query Subs($limit: Int!, $cursor: String) {\n  subs(limit: $limit, cursor: $cursor) {\n    hasMore\n    subs {\n      ...SubSnippet\n    }\n  }\n}\n    ${SubSnippetFragmentDoc}`;\n\n/**\n * __useSubsQuery__\n *\n * To run a query within a React component, call `useSubsQuery` and pass it any options that fit your needs.\n * When your component renders, `useSubsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSubsQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\nexport function useSubsQuery(baseOptions: Apollo.QueryHookOptions<SubsQuery, SubsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<SubsQuery, SubsQueryVariables>(SubsDocument, options);\n      }\nexport function useSubsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SubsQuery, SubsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<SubsQuery, SubsQueryVariables>(SubsDocument, options);\n        }\nexport type SubsQueryHookResult = ReturnType<typeof useSubsQuery>;\nexport type SubsLazyQueryHookResult = ReturnType<typeof useSubsLazyQuery>;\nexport type SubsQueryResult = Apollo.QueryResult<SubsQuery, SubsQueryVariables>;\nexport const AlluserDocument = gql`\n    query alluser {\n  alluser {\n    ...alluserSnippet\n  }\n}\n    ${AlluserSnippetFragmentDoc}`;\n\n/**\n * __useAlluserQuery__\n *\n * To run a query within a React component, call `useAlluserQuery` and pass it any options that fit your needs.\n * When your component renders, `useAlluserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAlluserQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAlluserQuery(baseOptions?: Apollo.QueryHookOptions<AlluserQuery, AlluserQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AlluserQuery, AlluserQueryVariables>(AlluserDocument, options);\n      }\nexport function useAlluserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AlluserQuery, AlluserQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AlluserQuery, AlluserQueryVariables>(AlluserDocument, options);\n        }\nexport type AlluserQueryHookResult = ReturnType<typeof useAlluserQuery>;\nexport type AlluserLazyQueryHookResult = ReturnType<typeof useAlluserLazyQuery>;\nexport type AlluserQueryResult = Apollo.QueryResult<AlluserQuery, AlluserQueryVariables>;\nexport const MailActivityDocument = gql`\n    query mailActivity {\n  mailActivity {\n    ...ActivitySnippet\n  }\n}\n    ${ActivitySnippetFragmentDoc}`;\n\n/**\n * __useMailActivityQuery__\n *\n * To run a query within a React component, call `useMailActivityQuery` and pass it any options that fit your needs.\n * When your component renders, `useMailActivityQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMailActivityQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMailActivityQuery(baseOptions?: Apollo.QueryHookOptions<MailActivityQuery, MailActivityQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MailActivityQuery, MailActivityQueryVariables>(MailActivityDocument, options);\n      }\nexport function useMailActivityLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MailActivityQuery, MailActivityQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MailActivityQuery, MailActivityQueryVariables>(MailActivityDocument, options);\n        }\nexport type MailActivityQueryHookResult = ReturnType<typeof useMailActivityQuery>;\nexport type MailActivityLazyQueryHookResult = ReturnType<typeof useMailActivityLazyQuery>;\nexport type MailActivityQueryResult = Apollo.QueryResult<MailActivityQuery, MailActivityQueryVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    ...RegularUser\n  }\n}\n    ${RegularUserFragmentDoc}`;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, options);\n      }\nexport function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, options);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;\nexport const ProfileDocument = gql`\n    query Profile {\n  me {\n    ...ProfileUser\n  }\n}\n    ${ProfileUserFragmentDoc}`;\n\n/**\n * __useProfileQuery__\n *\n * To run a query within a React component, call `useProfileQuery` and pass it any options that fit your needs.\n * When your component renders, `useProfileQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProfileQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useProfileQuery(baseOptions?: Apollo.QueryHookOptions<ProfileQuery, ProfileQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ProfileQuery, ProfileQueryVariables>(ProfileDocument, options);\n      }\nexport function useProfileLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProfileQuery, ProfileQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ProfileQuery, ProfileQueryVariables>(ProfileDocument, options);\n        }\nexport type ProfileQueryHookResult = ReturnType<typeof useProfileQuery>;\nexport type ProfileLazyQueryHookResult = ReturnType<typeof useProfileLazyQuery>;\nexport type ProfileQueryResult = Apollo.QueryResult<ProfileQuery, ProfileQueryVariables>;\nexport const SubbytokenDocument = gql`\n    query subbytoken($token: String!) {\n  subbytoken(token: $token) {\n    ...SubSnippet\n  }\n}\n    ${SubSnippetFragmentDoc}`;\n\n/**\n * __useSubbytokenQuery__\n *\n * To run a query within a React component, call `useSubbytokenQuery` and pass it any options that fit your needs.\n * When your component renders, `useSubbytokenQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSubbytokenQuery({\n *   variables: {\n *      token: // value for 'token'\n *   },\n * });\n */\nexport function useSubbytokenQuery(baseOptions: Apollo.QueryHookOptions<SubbytokenQuery, SubbytokenQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<SubbytokenQuery, SubbytokenQueryVariables>(SubbytokenDocument, options);\n      }\nexport function useSubbytokenLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SubbytokenQuery, SubbytokenQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<SubbytokenQuery, SubbytokenQueryVariables>(SubbytokenDocument, options);\n        }\nexport type SubbytokenQueryHookResult = ReturnType<typeof useSubbytokenQuery>;\nexport type SubbytokenLazyQueryHookResult = ReturnType<typeof useSubbytokenLazyQuery>;\nexport type SubbytokenQueryResult = Apollo.QueryResult<SubbytokenQuery, SubbytokenQueryVariables>;\nexport const GetAlltemplatesDocument = gql`\n    query GetAlltemplates($limit: Int!, $cursor: String) {\n  getAlltemplates(limit: $limit, cursor: $cursor) {\n    hasMore\n    templates {\n      ...TemplatesSnippet\n    }\n  }\n}\n    ${TemplatesSnippetFragmentDoc}`;\n\n/**\n * __useGetAlltemplatesQuery__\n *\n * To run a query within a React component, call `useGetAlltemplatesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAlltemplatesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAlltemplatesQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\nexport function useGetAlltemplatesQuery(baseOptions: Apollo.QueryHookOptions<GetAlltemplatesQuery, GetAlltemplatesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetAlltemplatesQuery, GetAlltemplatesQueryVariables>(GetAlltemplatesDocument, options);\n      }\nexport function useGetAlltemplatesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAlltemplatesQuery, GetAlltemplatesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetAlltemplatesQuery, GetAlltemplatesQueryVariables>(GetAlltemplatesDocument, options);\n        }\nexport type GetAlltemplatesQueryHookResult = ReturnType<typeof useGetAlltemplatesQuery>;\nexport type GetAlltemplatesLazyQueryHookResult = ReturnType<typeof useGetAlltemplatesLazyQuery>;\nexport type GetAlltemplatesQueryResult = Apollo.QueryResult<GetAlltemplatesQuery, GetAlltemplatesQueryVariables>;"]},"metadata":{},"sourceType":"module"}